/**
 * File:
 *   lvm_config_ui.ycp
 *
 * Module: 
 *    configuration of lvm in installed system
 * Summary:
 *
 * Authors:
 *   mike <mike@suse.de>
 *
 * $Id$
 *
 *
 *----------------------------------------------------
 * IMPORTANT: when you read this code notice:
 *
 * vg  = volume group
 * vgs = volume groups
 *
 * pv  = physical volume
 * pvs = physical volumes
 *
 * lv  = logical volume
 * lvs = logical volumes
 *----------------------------------------------------
 *
 */
{
    import "Arch";
    import "Storage";
    import "FileSystems";
    import "Mode";
    
    textdomain "storage"; 

    include "ui/common_popups.ycp";
    include "partitioning/partition_defines.ycp";
    include "partitioning/custom_part_dialogs.ycp";
    include "partitioning/custom_part_lib.ycp";
    include "partitioning/custom_part_helptexts.ycp";
    include "partitioning/custom_part_dialogs.ycp";
    include "partitioning/lvm_ui_dialogs.ycp";
    include "partitioning/lvm_ui_lib.ycp";
    include "partitioning/lvm_lib.ycp";
    include "partitioning/lvm_lv_lib.ycp";
    include "partitioning/lvm_pv_lib.ycp";
  
   
    
    global define CheckItemIsNotMounted( any id )
    ``{
      boolean ret = true;
      if( id != nil )
	{
	string device = Storage::GetMainDevKey(id) + Storage::GetSubDevIndex(id);
	string cmd = "mount | grep \"^" + device + " \"";
	y2milestone( "mounts cmd=%1", cmd );
	string line = lookup (SCR(`Execute(.target.bash_output, cmd)), "stdout", "");
	y2milestone( "mounts line=%1", line );
	ret = size(line)<size(device);
	if( !ret )
	    {
	    line = substring( line, find( line, "on " )+3 );
	    y2milestone( "mounts line=%1", line );
	    line = substring( line, 0, findfirstof( line, " " ) );
	    y2milestone( "mounts line=%1", line );
	    UI::MessagePopup(sformat(_("Device %1 is already mounted at %2.  
A mounted file system cannot be added to a volume group.
"),
	       device, line ));
	    }
	}
      y2milestone( "mounts ret=%1", ret );
      return( ret );
      }

    string  current_vg       = "none";    
   

    boolean test_mode        = Mode::test;
    map     modify_targets   = $[];
    boolean view_all_mnts    = Storage::GetLvmViewAllMnt();
    boolean testsuite        = Storage::GetTestsuite();

    
    ////////////////////////////////////////////////
    // Testmode, should be commented in release
    // test_mode   = true;
    // test_mode   = false;
    // architecture = "ppc";
    // system_type = "prep";
    // architecture = "axp";
    ////////////////////////////////////////////////
    
    list    lvm_vgs      = get_vgs(  targetMap );
    list    parts_lv 	 = get_lvs_and_mounted_partitions( targetMap, view_all_mnts, current_vg );
    list    table_lv 	 = get_lv_widget_table( parts_lv );
    list    parts_pv 	 = get_possible_pvs(    targetMap );
    list    table_pv 	 = get_pv_widget_table( parts_pv );

    //////////////////////////////////////////////////////////////////////
    // First we typically have to create a volumegroup
    // check if there is already a lvm group
    //////////////////////////////////////////////////////////////////////
    
    if ( size( lvm_vgs ) == 0 )
    {
	any addVG = addVolumeGroup( targetMap, lvm_vgs, modify_targets );
	
	// has the user cancelled the dialog? 
	if ( ! lookup(addVG, "cancelled",false) )
	{
	    targetMap       = lookup( addVG, "targets", $[] );
	    lvm_vgs         = lookup( addVG, "lvm_vgs", [] );
	    current_vg      = lookup( addVG, "current_vg", "" );
	    modify_targets  = lookup( addVG, "modify_targets", $[] );
	}
	else
	{
	    return( `back );
	}
    }
    else
    {
	// there are already vgs ... select the first one
	current_vg = select( lvm_vgs, 0, "" ); 
    }

    
    // Display current vg:
    new_vg_list( lvm_vgs );
    UI::ChangeWidget( `id(`vg), `Value, current_vg);


    //////////////////////////////////////////////////////////////////////
    // mainloop
    //////////////////////////////////////////////////////////////////////

    any vg = nil;
    any     id          =  "";
    symbol  ret         = `next;
    integer max_size    = 0;
    integer used_size   = 0;
    list    size_list   = [];
    string  vg_size_str = "";

    Storage::SetModifyTargets( modify_targets );
    
    repeat
    {
        /////////////////////////////////////////////////////////////////
	// Show the current state:
	parts_pv 	 = get_possible_pvs(    targetMap );
	table_pv 	 = get_pv_widget_table( parts_pv );
	UI::ChangeWidget( `id(`pv_table), `Items, table_pv);

        parts_lv 	 = get_lvs_and_mounted_partitions( targetMap, view_all_mnts, current_vg );
	table_lv 	 = get_lv_widget_table( parts_lv );
	UI::ChangeWidget( `id(`lv_table), `Items, table_lv);

	
	string vg_size_str = get_vg_size( parts_pv, current_vg, `string );
	y2debug( "**** %1", vg_size_str );
	UI::ChangeWidget( `id(`pv_size), `Value, vg_size_str);

        UI::SetFocus( `id(`pv_table));


        
	/////////////////////////////////////////////////////////////////
	// Size for BarGraph

	parts_lv 	    = get_lvs_and_mounted_partitions(  targetMap, false, current_vg );
	y2debug( "parts_lv=%1 current_vg=%2", parts_lv, current_vg );
	size_list   = get_lv_size_info( targetMap,  parts_lv, current_vg );
	max_size    = select( size_list, 1, 0 );
	used_size   = select( size_list, 0, 0 );
	y2debug( "list=%3, max_size=%1 used_size=%2", max_size, used_size, size_list );
	vg_size_str = ByteToHumanStringWithZero( max_size );


	if ( UI::HasSpecialWidget( `BarGraph ))
	{
	   UI::ChangeWidget( `id(`vg_size), `Labels,
			     [
			      sformat( "used\n%1", ByteToHumanStringWithZero(used_size)),
			      sformat( "free\n%1", ByteToHumanStringWithZero(max_size))
			     ] );
	   UI::ChangeWidget( `id(`vg_size), `Values, [ used_size / 1048576, max_size / 1048576 ] );
	   y2debug( "##################### %1 ##### %2", ByteToHumanStringWithZero(used_size),
		    ByteToHumanStringWithZero(max_size));
	}
	else
	{
	   UI::ChangeWidget( `id(`vg_size), `Value, vg_size_str);
	}
	
	if ( id != "" )
	{
	    UI::ChangeWidget( `id(`lv_table), `CurrentItem, id);
	    UI::ChangeWidget( `id(`pv_table), `CurrentItem, id);
	}

        /////////////////////////////////////////////////////////////////
        // Wait for User input

	ret= UI::UserInput();

	y2milestone( "USERINPUT %1", ret );


        ////////////////////////////////////////
	// user has changed "view all mountpoints" checkbox
	////////////////////////////////////////
	
	if ( ret == `viewmnt )
	{
	    view_all_mnts = UI::QueryWidget(`id(`viewmnt), `Value );
	}


        ////////////////////////////////////////
	// user has changed the current volume group
	////////////////////////////////////////
	
	if ( ret == `vg )
	{
	    current_vg = UI::QueryWidget( `id(`vg), `Value);
	    y2debug("TTT %1", current_vg );
	}

	
	////////////////////////////////////////
        // Add a new volume group:
        ////////////////////////////////////////

        if ( ret == `vg_add_vg )
        {
            any addVG = addVolumeGroup( targetMap, lvm_vgs, modify_targets );

            // has the user cancelled the dialog?
            if ( ! lookup(addVG, "cancelled",false) )
            {
                targetMap       = lookup( addVG, "targets", $[] );
                modify_targets  = lookup( addVG, "modify_targets", $[] );
                lvm_vgs         = lookup( addVG, "lvm_vgs", [] );
                current_vg      = lookup( addVG, "current_vg", "" );
            }
        }

	
	////////////////////////////////////////
	// Remove volume group:
	////////////////////////////////////////
	
	if ( ret == `vg_remove_vg )
	{
	integer count = size(get_lv_names(targetMap, current_vg));
	if( count > 0 )
	{
	    // Message popup
	    UI::MessagePopup(sformat(_("The volume group \"%1\" contains %2 
logical volumes. It cannot be removed. Remove all logical volumes and 
remove the volume group afterwards."), current_vg, count));

	}
	else
	{
	    if( UI::ContinueCancelPopup( _("Do you really want to remove the current volume group?") ))
		{
		map ret = removeVolumeGroup( current_vg, targetMap, lvm_vgs, modify_targets );
		targetMap       = lookup( ret, "targets", $[] );
		modify_targets  = lookup( ret, "modify_targets", $[] );
		lvm_vgs  	= lookup( ret, "lvm_vgs", [] );
		current_vg      = lookup( ret, "current_vg", "" );
		}
	    }
	}

	
	////////////////////////////////////////
	// Add a new physical volume:
	////////////////////////////////////////
	
	
	if ( ret == `pv_add && current_vg != nil )
	{
	    id = UI::QueryWidget(`id(`pv_table), `CurrentItem );
	    y2debug( "WWW ID ADD GROUP %1", id);
	    
	    if ( id!=nil && CheckItemIsNotPv(id) && CheckItemIsNotMounted(id) )
	    {
		any addPV = addPhysicalVolume( modify_targets, targetMap, id,  current_vg );
            
		// has an error occured
		if ( ! lookup(addPV, "error", false) )
		{
		    targetMap      = lookup( addPV, "targets", $[] );
		    modify_targets  = lookup( addPV, "modify_targets", $[] );
		}
	    }
	}

	////////////////////////////////////////
	// Delete a new physical volume:
	////////////////////////////////////////
	
	if ( ret == `pv_delete && current_vg != nil )
	{
	    id = UI::QueryWidget(`id(`pv_table), `CurrentItem );
	    
	    if ( id!=nil && CheckItemIsPv(id) )
	    {
	        string vg = lookup( Storage::IdFromTarget( targetMap, id ),
				    "lvm_group", "" );
		any deletePV = removePhysicalVolume( modify_targets, targetMap, id, vg );
            
		// has an error occured
		if ( ! lookup(deletePV, "error",false) )
		{
		    targetMap      = lookup( deletePV, "targets", $[] );
		    modify_targets  = lookup( deletePV, "modify_targets", $[] );
		}
	    }
	}

	
	////////////////////////////////////////
	// Add a new logical volume:
	////////////////////////////////////////
	
	
	if ( ret == `lv_add )
	{
            map Lv = $[
                       "create"         :       true,
                       "mount"          :       "",
                       "used_fs"        :       `reiser,
                       "crypt_fs"       :       false,
                       "size"           :       max_size /4 ,
                       "subdev"         :       "",
                       "stripes"        :       0,
                       "fs_options"     :       $[],
                       "format"         :       true,
                       "fsid"           :       142,
                       "mount"          :       GetMountPointProposal(targetMap , ["/", "swap", "/boot" ] )
            ];


	    map createLv = DlgCreateEditLogicaVolume( "create",
					   Lv,
					   max_size,
					   current_vg,
					   get_lv_names(targetMap,current_vg),
					   FileSystems::GetAllFileSystems(true,true),
					   false,
					   ""
					   );
            
	    // has an error occured
	    if ( size(createLv)>0 )
	    {
		map ret = addLogicalVolume( createLv, modify_targets, targetMap, current_vg );
		
		targetMap      = lookup( ret, "targets",        targetMap );
		modify_targets = lookup( ret, "modify_targets", modify_targets );
	    }
	}

	////////////////////////////////////////
	// Edit/Resize a new logical volume:
	////////////////////////////////////////
	
	
	if ( ret == `lv_edit )
	{
	    id = UI::QueryWidget(`id(`lv_table), `CurrentItem );

	    if ( id == nil )
	    {
		// Popup text
		UI::ErrorPopup(_("No device selected.
Select the device to edit.
"));
		
	    }
	    else
	    {
		map Lv = GetLvData(id, modify_targets, targetMap);
		string device = Storage::GetMainDevKey(id) + Storage::GetSubDevIndex(id);
		string tmp_vg = lookup( Lv, "vgname", "");
		size_list   = get_lv_size_info( targetMap,
		                                get_lvs_and_mounted_partitions(  targetMap, false, tmp_vg ), tmp_vg );
		max_size    = select( size_list, 1, 0 );
		used_size   = select( size_list, 0, 0 );

		y2debug( "DDDDD %1", Lv);
		
		if ( !lookup(Lv, "error",false) )
		{
		    if ( lookup( Lv, "is_created",false) )
		    {
			map createLv = DlgCreateEditLogicaVolume( "edit",
								  Lv,
								  max_size+lookup(Lv, "size",0),
								  tmp_vg,
								  [],
								  FileSystems::GetAllFileSystems(true,true),
								  false,
								  device );
            
			// has an error occured
			if ( size(createLv)>0 )
			{
			    map ret = editLogicalVolume( createLv,
							 modify_targets,
							 targetMap,
							 lookup( Lv, "vgname",""),
							 lookup( Lv, "modify_targets_index",0));
		
			    targetMap      = lookup( ret, "targets",        targetMap );
			    modify_targets = lookup( ret, "modify_targets", modify_targets );
			}
		    }
		    else
		    {
			map createLv = DlgCreateEditLogicaVolume( "resize",
								  Lv,
								  max_size +lookup(Lv, "size",0),
								  tmp_vg,
								  [],
								  FileSystems::GetAllFileSystems(true,true),
								  false,
								  device );
            
			// has an error occured
			if ( size(createLv)>0 )
			{
			    map ret = resizeLogicalVolume( createLv,
							   modify_targets,
							   targetMap,
							   Lv["vgname"]:"");
		
			    targetMap      = lookup( ret, "targets",        targetMap );
			    modify_targets = lookup( ret, "modify_targets", modify_targets );
			}
		    }
		}
	    }
	}

	////////////////////////////////////////
	// Delete a new logical volume:
	////////////////////////////////////////

	// search for old create and delte this entry !!!
	
	if ( ret == `lv_delete )
	{
	    id = UI::QueryWidget(`id(`lv_table), `CurrentItem );

	    if ( id == nil )
	    {
		// Popup text
		UI::ErrorPopup(_("No device selected.
Select the device to remove.
"));
		
	    }
	    else
	    {
		string maindev = Storage::GetMainDevKey( id);
		string subdev  = Storage::GetSubDevIndex( id );

		// Popup text
		string message = sformat( _("Do you want to remove
the logical volume %1/%2"), maindev, subdev );
	    
		boolean do_remove = UI::ContinueCancelPopup( message );
	    
		if ( do_remove )
		{
		    map Lv       = GetLvData(id, modify_targets, targetMap);
		    y2debug( "NBNBNBNB  %1  ", Lv);
		    y2debug( "NBNBNBNB  %1  ", modify_targets );
		    y2debug( "NBNBNBNB  %1  ", targetMap);
		    y2debug( "NBNBNBNB  %1  ", Lv["vgname"]:"" );
		    any deleteLV = removeLogicalVolume( Lv,
							modify_targets,
							targetMap,
							Lv["vgname"]:"" );
            
		    // has an error occured
		    if ( ! lookup(deleteLV, "error",false) )
		    {
			targetMap      = lookup( deleteLV, "targets", $[] );
			modify_targets = lookup( deleteLV, "modify_targets", $[] );
		    }
		}
	    }
	}

	if ( ret == `help )
	{
	    // LVM Helptext headline
	    UI::LongTextPopup( _("LVM Help"), `RichText( getLvmHelptext()), 70, 20 );
	}
	
        ////////////////////////////////////////
	// Finish this step
	////////////////////////////////////////
	
	if (ret == `finish || ret == `apply )
	{
	    y2milestone( "END___ %1", ret);
	    // due to lvm tools, we need a already created pv before
	    // creating a vg so we patch the execution stack

	    any check_ret = checkModifyTargets( modify_targets, targetMap );
	    y2milestone( "ENDx___ %1", ret);

	    if ( check_ret == `next )
	    {
	       y2milestone( "END__ %1", ret);
	       map procMod = processModifyTargets( modify_targets, targetMap );

	       targetMap       = lookup( procMod, "targets", $[] );
	       modify_targets  = lookup( procMod, "modify_targets", $[] );
		
	       Storage::SetModifyTargets( modify_targets);
	       Storage::SetTargetMap( targetMap );
	       Storage::SetLvmViewAllMnt( view_all_mnts );
	    }
	}

    } until (ret == `finish || ret == `apply || ret == `abort);

    y2milestone( "END_ %1", ret);
    y2milestone( "modify_targets=%1", modify_targets );
	
    return ret;
}

// end
