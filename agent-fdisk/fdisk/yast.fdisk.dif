--- defines.h
+++ defines.h	2001/07/27 10:32:13
@@ -15,7 +15,7 @@
 #define HAVE_personality
 #define HAVE_updwtmp
 #define HAVE_libintl_h
-#define ENABLE_NLS
+#undef ENABLE_NLS
 #define HAVE_progname
 #define HAVE_openpty
 #define ENABLE_WIDECHAR
--- fdisk/fdisk.c
+++ fdisk/fdisk.c	2000/05/30 15:06:09
@@ -672,7 +672,7 @@
 
 		if (!get_nr_sects(pe->part_table) &&
 		    (partitions > 5 || ptes[4].part_table->sys_ind)) {
-			printf("omitting empty partition (%d)\n", i+1);
+			/* printf("omitting empty partition (%d)\n", i+1); */
 			delete_partition(i);
 			goto remove; 	/* numbering changed */
 		}
@@ -1612,7 +1626,7 @@
 		if (start > limit)
 			break;
 		if (start >= temp+units_per_sector && read) {
-			printf(_("Sector %d is already allocated\n"), temp);
+			printf(_("First: Sector %d is already allocated\n"), temp);
 			temp = start;
 			read = 0;
 		}
@@ -1709,24 +1709,20 @@
 			limit = first[i] - 1;
 	}
 	if (start > limit) {
-		printf(_("No free sectors available\n"));
+		printf(_("First: No free sectors available\n"));
 		if (n > 4)
 			partitions--;
 		return;
 	}
-	if (cround(start) == cround(limit)) {
-		stop = limit;
-	} else {
-		snprintf(mesg, sizeof(mesg),
-			 _("Last %s or +size or +sizeM or +sizeK"),
-			 str_units(SINGULAR));
-		stop = read_int(cround(start), cround(limit), cround(limit),
-				cround(start), mesg);
-		if (display_in_cyl_units) {
-			stop = stop * units_per_sector - 1;
-			if (stop >limit)
-				stop = limit;
-		}
+	snprintf(mesg, sizeof(mesg),
+		 _("Last %s or +size or +sizeM or +sizeK"),
+		 str_units(SINGULAR));
+	stop = read_int(cround(start), cround(limit), cround(limit),
+			cround(start), mesg);
+	if (display_in_cyl_units) {
+		stop = stop * units_per_sector - 1;
+		if (stop >limit)
+			stop = limit;
 	}
 
 	set_partition(n, p, start, stop, sys, ptes[n].offset);
@@ -2093,6 +2116,9 @@
 	int optl = 0, opts = 0;
 	int user_set_sector_size = 0;
 
+	setvbuf( stdout, NULL, _IONBF, 0 );
+	setvbuf( stderr, NULL, _IONBF, 0 );
+
 	setlocale(LC_ALL, "");
 	bindtextdomain(PACKAGE, LOCALEDIR);
 	textdomain(PACKAGE);
@@ -2144,7 +2170,6 @@
 
 	if (optl) {
 		nowarn = 1;
-		type_open = O_RDONLY;
 		if (argc > optind) {
 			int k;
 			/* avoid gcc warning:
--- fdisk/fdisksunlabel.c
+++ fdisk/fdisksunlabel.c	2000/05/30 15:17:18
@@ -182,7 +182,7 @@
     int i;
 
     if (!ioctl(fd, SCSI_IOCTL_GET_IDLUN, &id)) {
-        sprintf(buffer,
+        snprintf(buffer, sizeof (buffer),
             "Host: scsi%d Channel: %02d Id: %02d Lun: %02d\n",
 #if 0                    
             ((id[0]>>24)&0xff)-/*PROC_SCSI_SCSI+PROC_SCSI_FILE*/33,
@@ -195,6 +195,7 @@
             (id[0]>>16)&0xff,
             id[0]&0xff,
             (id[0]>>8)&0xff);
+	buffer[sizeof(buffer) - 1] = '\0';
         pfd = fopen("/proc/scsi/scsi","r");
         if (pfd) {
             while (fgets(buffer2,2048,pfd)) {
--- fdisk/llseek.c
+++ fdisk/llseek.c	2000/05/30 15:06:31
@@ -51,7 +51,7 @@
 	return (retval == -1 ? (ext2_loff_t) retval : result);
 }
 
-#endif /* __alpha__ */
+#endif /* __alpha__ || __ia64__ */
 
 #endif	/* HAVE_LLSEEK */
 
--- fdisk/fdisk.c	Mon Sep 10 19:09:15 2001
+++ fdisk/fdisk.c	Mon Sep 10 19:18:45 2001
@@ -1868,6 +1868,9 @@
 		sgi_add_partition(get_partition(0, partitions), LINUX_NATIVE);
 		return;
 	}
+	if (aix_label && (!valid_part_table_flag(MBRbuffer)) ) {
+		create_doslabel();
+	}
 
 	if (partitions >= MAXIMUM_PARTS) {
 		printf(_("The maximum number of partitions has been created\n"));
