/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:
 *   lvm_ui_dialogs.ycp
 *
 * Module: 
 *    configuration of lvm: lib for the user interface
 *    - contains only dialogs    
 *
 * Summary:
 *
 * Authors:
 *   mike <mike@suse.de>
 *
 *
 * $Id$
 *
 */


{

textdomain "storage";


import "Storage";
import "Popup";

include "partitioning/custom_part_dialogs.ycp";
include "partitioning/custom_part_lib.ycp";
include "partitioning/lvm_lv_lib.ycp";


define boolean HandleRemoveLv( map<string,map> targetMap, string id )
    ``{
    boolean ret = false;
    map disk = Storage::GetDisk( targetMap, id );
    map Lv = Storage::GetPartition( targetMap, id );
    if( size(Lv)==0 || Lv==nil || Lv["type"]:`primary!=`lvm )
	{
	// Popup text
	Popup::Error(_("You can only remove logical volumes."));
	}
    else if( find( map p, disk["partitions"]:[], ``(p["origin"]:""==Lv["name"]:""))!=nil )
	{
	// Popup text
	Popup::Error(_("There is at least one snapshot active for this volume.
Remove the snapshot first."));
	}
    else if( find( map p, disk["partitions"]:[], ``(p["used_pool"]:""==Lv["name"]:""))!=nil )
	{
	// Popup text
	Popup::Error(_("There is at least one thin volume using this pool.
Remove the thin volume first."));
	}
    else
	{
	// Popup text
	string message = sformat( _("Remove the logical volume %1?"), id );

	if( Popup::YesNo( message ))
	    {
	    ret = Storage::DeleteDevice(id);
	    }
	}
    y2milestone( "HandleRemoveLv ret:%1", ret );
    return( ret );
    }


}
