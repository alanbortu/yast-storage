/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:	ep-tmpfs-lib.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Thomas Fehr <fehr@suse.de>
 *
 * This file must only be included in other Expert Partitioner files ("ep-*.ycp").
 */
{
    textdomain "storage";


void EpDeleteTmpfsDevice(string device)
    {
    if (device == nil)
	{
	// error popup
	Popup::Error(_("No tmpfs device selected."));
	return;
	}

    list<string> tmp = splitstring(device,":");
    string mount = tmp[1]:"";
    y2milestone( "EpDeleteTmpfsDevice device:%1 mount:%2", device, mount );
    // YesNo popup.  %1 is path to a file
    if( Popup::YesNo( sformat(_("\nReally delete tmpfs mounted to %1"), mount )) &&
        Storage::DelTmpfsVolume( mount ))
	{
	any new_focus = nil;
	if (UI::QueryWidget(`tree, `CurrentItem) == device)
	    new_focus = `tmpfs;
	UpdateMainStatus();
	UpdateNavigationTree(new_focus);
	TreePanel::Create();
	}
    }

void EpAddTmpfsDevice()
    {
    map<string, any> data = $[ "device":"tmpfs", "fstype":"TMPFS", "format":true, 
                               "type":`tmpfs, "detected_fs":`tmpfs, "used_fs":`tmpfs ];
    if( DlgCreateTmpfs(data) )
	{
	y2milestone( "EpAddTmpfsDevice data:%1", data );
	Storage::AddTmpfsVolume( data["mount"]:"",  data["fstopt"]:"" );
	UpdateMainStatus();
	UpdateNavigationTree(nil);
	TreePanel::Create();
	}
    }
}
