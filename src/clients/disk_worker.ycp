/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:
 *   disk_worker.ycp
 *
 * Module:
 *   Configuration of disk
 *
 * Summary:
 *   Main file
 *
 * Authors:
 *   Michael Hager <mike@suse.de>
 *   Michal Svec <msvec@suse.com>
 *   Arvin Schnell <aschnell@suse.de>
 *
 * Wrapper file for inst_disk.ycp
 */
{
    textdomain "storage";

    import "CommandLine";
    import "Storage";
    import "StorageFields";


    any DiskSequence()
    {
	if (!Storage::InitLibstorage(false))
	    return `abort;

	Storage::SwitchUiAutomounter(false);
	any ret = WFM::CallFunction("inst_disk", [ true, true ]);
	Storage::SwitchUiAutomounter(true);
	Storage::SaveUsedFs();

	Storage::FinishLibstorage();

	return ret;
    }


    boolean Dummy() { return true; }


    boolean StorageCmdline(map<string, string> options)
    {
	boolean disks = true;
	boolean partitions = true;

	if (!isempty(options))
	{
	    disks = haskey(options, "disks");
	    partitions = haskey(options, "partitions");
	}

	list<symbol> fields = [ `device, `size, `fs_type, `mount_point, `label, `model ];

	symbol Predicate(map disk, map partition)
	{
	    list<symbol> returns = [ `tmpfs, `nfs, `nfs4, `unknown ];

	    if (partition == nil)
	    {
		if (disks)
		    return `showandfollow;
		else
		    return `follow;
	    }
	    else
	    {
		if (partitions)
		{
		    if (contains(returns, partition["used_fs"]:`unknown))
			return `ignore;
		    else
			return `show;
		}
		else
		    return `ignore;
	    }
	}

	map<string, map> target_map = Storage::GetTargetMap();

	term header = StorageFields::TableHeader(fields);
	list<term> content = StorageFields::TableContents(fields, target_map, Predicate);

	CommandLine::PrintTable(header, content);

	return true;
    }


    map cmdline = $[
	// Commandline help title
	"help" : _("Storage Configuration"),
	"id" : "disk",
	"guihandler" : DiskSequence,
	"initialize" : Dummy,
	"finish" : Dummy,
	"actions" : $[
	    "list" : $[
		// Commandline command help
		"help" : _("List disks and partitions"),
		"example" : "storage list partitions",
		"handler" : StorageCmdline,
		]
	    ],
	"options" : $[
	    "disks" : $[
		// Command line option help text
		"help" : _("List disks"),
		],
	    "partitions" : $[
		// Command line option help text
		"help" : _("List partitions"),
		],
	    ],
	"mappings" : $[
	    "list" : [ "disks", "partitions" ]
	    ]
	];

    CommandLine::Run(cmdline);
    return true;
}
