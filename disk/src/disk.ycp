/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:
 *   disk.ycp
 *
 * Module:
 *   Configuration of disk
 *
 * Summary:
 *   Main file
 *
 * Authors:
 *   Michael Hager <mike@suse.de>
 *
 * $Id$
 *
 * Wrapper file for inst_disk.ycp
 *
 */
{
    textdomain "storage";

    import "Popup";
    import "Wizard";
    import "Misc";
    import "Label";


    // popup text
    string msg = _("Only use this program if you are familiar with partitioning hard disks.

Never partition disks that may, in any way, be in use
(mounted, swap, etc.) unless you know exactly what you are
doing. Otherwise, the partitioning table will not be forwarded to the
kernel, which will most likely lead to data loss.

To continue despite this warning, click Yes.
");


    // no params == UI, some params == commandline
    if (size (WFM::Args()) == 0)
    {
	Wizard::CreateDialog();
	Wizard::SetContents(
	    // dialog heading
	    _("Expert Partitioner"),
	    // text show during initialization
	    `Label(_("Initializing...")),
	    // helptext
	    _("<p>Volumes are being detected.</p>"),
	    false,
	    false
	);
	Wizard::SetDesktopTitleAndIcon ("disk");

	// popup headline
	integer warn = tointeger(Misc::SysconfigRead( .sysconfig.storage.WARN_EXPERT, "1" ));
	y2milestone( "warn:%1", warn );
	if( warn==nil )
	    warn = 1;
	if (warn==0||Popup::YesNoHeadline(Label::WarningMsg(),msg)==true) {
	    y2milestone ("--- Calling disk_worker %1 ---", WFM::Args());
	    any ret = WFM::call("disk_worker", WFM::Args());
	    y2milestone ("--- Returned: %1 ---", ret);
	} else {
	    y2milestone ("User decided not to run disk...");
	}

	Wizard::CloseDialog();
    }
    else
    {
	y2milestone ("--- Calling disk_worker %1 ---", WFM::Args());
	any ret = WFM::call("disk_worker", WFM::Args());
	y2milestone ("--- Returned: %1 ---", ret);
    }

    return true;
}
