/**
 * File:
 *   cdrom.ycp
 *
 * Module:
 *   Configuration of cdrom
 *
 * Summary:
 *   Main file
 *
 * Authors:
 *   Thoms Fehr <fehr@suse.de>
 *
 * $Id$
 *
 */

{
textdomain "storage";

import "Wizard";
import "Misc";
import "AsciiFile";
import "Partitions";

import "Label";
import "Popup";
import "Storage";
import "StorageDevices";

map<integer,map> cdrom = $[];

define map<string,string> GetCdromLinks()
    ``{	    
    list pat = [ "cdrom*", "dvd*", "dvdrecorder*", "cdrecorder*", "dvdram*" ];
    map<string,string> links = $[];
    foreach( string l, Storage::GetDirPatterns( "/dev", pat ),
	``{
	map st = (map)SCR::Read( .target.lstat, l );
	if( st["islink"]:false )
	    {
	    string content = (string)SCR::Read( .target.symlink, l );
	    integer pos = find( content, "/dev/" );
	    y2milestone( "pos %1, cont %2", pos, content );
	    if( pos >=0 )
		{
		content = substring( content, 5 );
		}
	    links[l] = content;
	    }
	});
    y2milestone( "links %1", links );
    return( links );
    }

define list CreateTableList( map<any,map> cdrom )
    ``{
    list clist = maplist( any k, map entry, cdrom,
	``{
	term it = `item( `id(k) );
	it = add( it, entry["model"]:"" );
	it = add( it, entry["device"]:"" );
	if( entry["configured"]:false )
	    {
	    it = add( it, "/dev/"+entry["link",0]:"" );
	    it = add( it, entry["mount"]:"" );
	    }
	else
	    {
	    it = add( it, "" );
	    it = add( it, "" );
	    }
	return( it );
	});
    y2milestone( "clist %1", clist );
    return( clist );
    }


define void EnableButtons( map entry )
    ``{
    UI::ChangeWidget( `id(`add), `Enabled, !entry["configured"]:false );
    UI::ChangeWidget( `id(`remove), `Enabled, entry["configured"]:false );
    }

define map IntegrateCd( map entry, map fstab )
    ``{
    map ret = $[];
    y2milestone( "entry %1", entry );
    string link = "/dev/" + entry["link",0]:"";
    string t = substring(entry["device"]:"",5);
    y2milestone( "link %1 to %2", link, t );
    SCR::Execute( .target.symlink, t, link );
    t = entry["mount"]:"";
    if( SCR::Read( .target.size, t )<0 )
	{
	SCR::Execute( .target.bash, "mkdir " + t );
	}
    t = substring( t, findlastof(t,"/")+1 );
    ret["d"] = t;
    list lines = Storage::FindFstabLines( fstab, "", link, "", "" );
    if( size(lines)>0 )
	{
	ret["l"] = lines[0]:-1;
	AsciiFile::ChangeLineField( fstab, lines[0]:-1, 1, entry["mount"]:"" );
	}
    else
	{
	map new = Storage::MakeCdromFstabEntry( entry );
	list fstlist = [ link, entry["mount"]:"",
			 new["vfstype"]:"", new["mntops"]:"", 
			 sformat("%1",new["freq"]:0),
			 sformat("%1",new["passno"]:0) ];

	AsciiFile::AppendLine( fstab, fstlist );
	}
    y2milestone( "ret %1", ret );
    return( ret );
    }

define string HelpText()
    ``{
    // help text
    return( _("<p>This module configures the CD/DVD drives in your system.</p>
<p>The list contains all detected CD/DVD drives. If there are entries for
the name of the link and the mount point displayed, the CD-ROM is integrated
into the system. Integration into the system means that a symbolic link
(e.g., /dev/cdrom, /dev/dvd, etc.) to the device name (e.g., /dev/hdc, /dev/sr0,
etc.) is present, an entry in /etc/fstab exists, a subdirectory below /media 
is present, and possibly a kernel command-line parameter is provided 
(for IDE devices).</p>
<p>Use \"Add\" and \"Remove\" to change the state 
of integration of an entry in the list.</p>
"));
    }

    term buttons = 
	`HBox( `PushButton(`id(`abort ), Label::AbortButton() ),
	       `HStretch(),
	       // button text
	       `PushButton(`id(`apply), _("&Apply") ),
	       `HStretch(),
	       `PushButton(`id(`finish), Label::FinishButton() ) );

    Wizard::OpenDialog( Wizard::GenericDialog( buttons ) );

    map<string,string> links = GetCdromLinks();

    map fstab = Partitions::GetFstab( "/etc/fstab" );

    list<map> tmp = maplist( map entry, (list<map>)SCR::Read(.probe.cdrom),
	``{
	map cd = StorageDevices::GetCdromEntry( entry["dev_name"]:"" );
        cd = union( cd, entry );
	y2milestone( "entry %1 is %2", entry["dev_name"]:"", cd );
	map config = (map)SCR::Read(.probe.status, entry["unique_key"]:"");
	cd["configured"] = config["configured"]:`no == `yes;
	cd["changed"] = false;
	string device = cd["dev_name"]:(entry["dev_name"]:"");
	cd["device"] = device;
	map<string,string> l = filter( string k, string e, links, ``(e==substring(device,5)));
	y2milestone( "l %1", l );
	list<string> link = [];
	link = maplist( string k, string e, l, ``(substring(k,5)));
	if( find( string e, link, ``(e=="cdrom")) != nil )
	    {
	    link = filter( string e, link, ``(e!="cdrom"));
	    link = add( link, "crom" );
	    }
	link = sort( string a, string b, link, ``(a!="cdrom"&&a!=b) );
	cd["link"] = link;
	cd["configured"] = cd["configured"]:false && size(link)>0;
	list lines = [];
	foreach( string l, link,
	    ``{
	    lines = union( lines, Storage::FindFstabLines( fstab, "", "/dev/"+l,
							   "", "" ));
	    });
	if( size(lines)>0 )
	    {
	    map fse = AsciiFile::GetLine( fstab, lines[0]:-1 );
	    cd["mount"] = fse["fields",1]:"";
	    }
	return( cd );
	});

    tmp = sort( map a, map b, tmp,
	``{
	boolean ret = true;
	ret = (a["configured"]:false || !b["configured"]:false) && 
	       a["configured"]:false != b["configured"]:false;
	y2milestone( "a:%1 b:%2 ret %3", a["configured"]:false, 
                     b["configured"]:false, ret );
	return( ret );
	});

    integer num=0;
    cdrom = listmap( map e, tmp, 
		     ``{num=num+1; e["index"]=num-1; return $[num-1:e];});

    y2milestone( "cdrom=%1", cdrom );

    term dialog =
	`VBox( 
	    `VSpacing(3),
	    `HBox( 
		`HWeight(3, `HSpacing() ),
		`HWeight(60, 
		    `VBox(
			// label text
		        `Left(`Label(_("Detected CD/DVD Devices"))),
			`Table( `id(`cdroms), 
			        `opt(`notify,`immediate,`keepSorting),
				// table header texts
				`header( _("Name"), _("Device"), _("Link"), _("Mount Point")),
				CreateTableList( cdrom ) ))), 
		`HWeight(2, `HSpacing() ),
		`HWeight(15, `Top( `VBox( `VSpacing(3),
					  `PushButton( `id(`add), 
						       // button text
					               _("A&dd") ),
					  `PushButton( `id(`remove), 
						       // button text
					               _("&Remove") )))),
		`HWeight(2, `HSpacing() )),
	    `VSpacing(3) 
	    );

    if( size(cdrom)==0 )
	{
        // popup text
	Popup::Message( _("No CD/DVD device found") );
	return;
	}
    // header text
    Wizard::SetContents( _("CD/DVD device integration"), dialog, HelpText(), 
                         false, false );
    EnableButtons( cdrom[0]:$[] );
    symbol ret = `none;
    do
	{
	ret = (symbol)UI::UserInput();
	y2milestone( "ret = %1", ret );
	if( ret == `add || ret == `remove )
	    {
	    num = (integer)UI::QueryWidget( `id(`cdroms), `CurrentItem );
	    cdrom[num,"changed"] = true;
	    cdrom[num,"configured"] = ret == `add;
	    if( ret == `add )
		{
		string type = substring( cdrom[num,"linkname"]:"", 5 );
		type = deletechars( type, "0123456789" );
		y2milestone( "type %1", type );
		tmp = maplist( any k, map e, 
                               filter( integer l, map f, cdrom, 
				       ``(l!=num && f["configured"]:false)),
			       ``(e) );
		y2milestone( "tmp %1", tmp );
		tmp = filter( map e, tmp, 
		                  ``(find(e["linkname"]:"", "/dev/"+type)==0));
		y2milestone( "tmp %1", tmp );
		list lnames = [];
		foreach( map e, tmp, 
		    ``{
		    if( size(e["link"]:[])>0 )
			lnames = add(lnames, e["link",0]:"");
		    });
		y2milestone( "lnames %1", lnames );
		lnames = filter( string e, (list<string>)lnames, ``(find(e, type)==0));
		y2milestone( "lnames %1", lnames );
		lnames = maplist( string e, (list<string>)lnames, ``(substring(e, size(type))));
		y2milestone( "lnames %1", lnames );
		lnames = maplist( string e, (list<string>)lnames, 
				  ``{
				  integer ret = 1;
				  if( e=="1" )
				      ret = 2;
				  else if( size(e)>0 )
				      ret = tointeger(e);
				  return( ret );
				  });
		y2milestone( "lnames %1", lnames );
		integer max = 1;
		while( contains( lnames, max ) )
		    {
		    max = max+1;
		    }
		if( max>1 )
		    {
		    type = type + sformat("%1",max);
		    }
		cdrom[num,"link"] = [ type ];
		cdrom[num,"mount"] = "/media/" + type;
		}
	    UI::ChangeWidget( `id(`cdroms), `Items, CreateTableList( cdrom ) );
	    UI::ChangeWidget( `id(`cdroms), `CurrentItem, num );
	    EnableButtons( cdrom[num]:$[] );
	    y2milestone( "entry %1", cdrom[num]:$[] );
	    }
	if( ret == `cdroms )
	    {
	    num = (integer)UI::QueryWidget( `id(`cdroms), `CurrentItem );
	    EnableButtons( cdrom[num]:$[] );
	    }
	else if( ret == `abort || ret == `cancel )
	    {
	    if( size(filter( any k, map e, cdrom, ``(e["changed"]:false)))>0 )
		{
		// popup text
		if( !Popup::YesNo( _("You have unsaved changes.
These changes will be lost if you abort now.

Discard changes?
")))
		    {
		    ret = `continue;
		    }
		}
	    }
	else if( ret == `apply || ret == `finish )
	    {
	    list<map> ch = maplist( integer l, map v, 
	                       filter( integer k, map e, cdrom, ``(e["changed"]:false)),
			       ``(v));
	    y2milestone( "changed %1", ch );
	    if( size(ch)>0 && size(links)>0 )
		{
		string cmd = "rm -f ";
                list<string> keep = [];
		foreach( map e, maplist( integer l, map m,
		                      filter( integer k, map v, cdrom, 
				              ``(v["configured"]:false)),
				      ``(m)),
		    ``{
		    if( size(e["link"]:[])>0 )
			{
			keep = add( keep, e["link",0]:"" );
			}
		    });
		keep = maplist( string e, keep, ``("/dev/"+e));
		list<string> rem = (list<string>) filter(string e1, maplist(string k, any e,links,``(k)),
		                   ``(!contains(keep,e1)));
		y2milestone( "keep=%1 rem:%2", keep, rem );
		cmd = cmd + mergestring( rem, " " );
		y2milestone( "cmd=%1", cmd );
		SCR::Execute( .target.bash, cmd );
		}
	    list<integer> remfstab = [];
	    list<string> remdirs = [];
	    foreach( map e, filter( map v, ch, ``(!v["configured"]:false)),
		``{
		list lines = [];
		foreach( string l, e["link"]:[], 
		    ``{
		    lines = union( lines,
				   Storage::FindFstabLines( fstab, "", "/dev/"+l,
							    "", "" ));
		    });
		remfstab = (list<integer>)union( remfstab, lines );
		remdirs = (list<string>) union( remdirs, e["link"]:[] );
		cdrom[e["index"]:-1,"link"] = [];
		});
	    foreach( map e, filter( map v, ch, ``(v["configured"]:false)),
		``{
		string device = e["dev_orig"]:(e["dev_name"]:"");
		device = substring(device,5);
		map ret = IntegrateCd( e, fstab );
		remdirs = filter( string e, remdirs, ``(e!=ret["d"]:""));
		remfstab = filter( integer e, remfstab, ``(e!=ret["l"]:-1));
		});
	    remdirs = filter( string e, remdirs, ``(e!="cdrom"));
	    if( size(remdirs)>0 )
		{
		string cmd = "cd /media && rmdir " + mergestring( remdirs, " ");
		y2milestone( "cmd=%1", cmd );
		SCR::Execute( .target.bash, cmd );
		}
	    if( size(ch)>0 )
		{
		boolean found = false;
		integer n = 0;
		while( !found && n<size(cdrom) )
		    {
		    found = cdrom[n,"configured"]:false &&
		            cdrom[n,"link",0]:"" == "cdrom";
		    n = n+1;
		    };
		integer k = 0;
		integer idx = -1;
		list nlist = StorageDevices::TypeNames;
		while( !found && idx==-1 && k<size(nlist) )
		    {
		    n = 0;
		    while( idx==-1 && n<size(cdrom) )
			{
			if( find( cdrom[n,"link",0]:"", nlist[k]:"" )==0 )
			    {
			    idx = n;
			    }
			n = n+1;
			};
		    k = k+1;
		    }
		if( !found && idx>=0 )
		    {
		    map entry = (map)eval(cdrom[idx]:$[]);
		    entry["link"] = [ "cdrom" ];
		    entry["mount"] = "/media/cdrom";
		    map ret = IntegrateCd( entry, fstab );
		    remfstab = filter( integer e, remfstab, ``(e!=ret["l"]:-1));
		    cdrom[idx,"link"] = add( cdrom[idx,"link"]:[], "cdrom" );
		    }
		if( size(remfstab)>0 )
		    {
		    AsciiFile::RemoveLines( fstab, remfstab );
		    }
		AsciiFile::RewriteFile( fstab, "/etc/fstab" );
		fstab = Partitions::GetFstab( "/etc/fstab" );
		links = GetCdromLinks();
		}
	    y2milestone( "remfstab %1 remdirs %2", remfstab, remdirs );
	    foreach( map e, ch, ``{ cdrom[e["index"]:-1,"changed"] = false; });
	    foreach( any k, map entry, cdrom,
		``{
		if( size(entry["unique_key"]:"")>0 )
		    {
		    SCR::Write( .probe.status.configured, 
			        entry["unique_key"]:"", 
				entry["configured"]:false?`yes:`no );
		    }
		});
	    if( size(ch)>0 )
		{
		// popup text
		string text = _("CD/DVD device changes performed.");
		Popup::Message( text );
		}
	    y2milestone( "cdrom %1", cdrom );
	    }
	}
    while( ret != `abort && ret != `finish );
    UI::CloseDialog();

}
