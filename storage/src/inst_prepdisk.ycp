/**
 * Module:		inst_prepdisk.ycp
 *
 * Authors:		Mathias Kettner (kettner@suse.de) (initial)
 *			Stefan Schubert (schubi@suse.de)
 *			Klaus Kaempf (kkaempf@suse.de)
 *
 * Purpose:
 * Displays a progress bar showing progress of disk preparation.
 * The user has the opportunity to cancel the installation. The
 * disks are partitioned. Swap is created and used. File systems
 * are created for the new partitions. Mount points are created
 * and mounted for the targets / and /boot.
 *
 *
 * SCR:	Write(.disk + scrpath + .partitions, targetpartitions)
 *	Execute (.target.mkdir, [ <mountpoint>, 0755] )
 *	Execute (.target.mount, [<device>, <mountpoint>] )
 *
 *
 * possible return values: `back, `abort `next

 *
 * $Id$
 */

 // TODO: - check for errors on non i386
 //       - lvm?

{
  textdomain "storage";
  import "Installation";
  import "Mode";
  import "Stage";
  import "Wizard";
  import "Storage";
  import "Hotplug";

  if (Mode::update ())
    return `auto;

  include "partitioning/partition_defines.ycp";

  boolean test_mode		= Mode::test();
  boolean this_is_for_real	= !test_mode;

  SCR::Write( .target.ycp, Storage::SaveDumpPath("targetMap_ps"), 
              Storage::GetTargetMap() );

// Define macro that creates a dialog with progressbar
define void MakefsDialog()
    ``{
    // html-format
    // advise the user to wait for completion
    // part 1 of 2
    string helptext = _("<p>
Please wait while your hard disk is prepared for installation...
<br></p>");
    if( !Stage::initial () )
	{
	helptext = _("<p>
Please wait while your hard disk is prepared...
<br></p>");
	}
    // rich-text format help text part 2 of 2
    helptext = helptext + _("\
<p>
Depending on the size of your hard disk and your processor speed, this action
might take some time.  Five minutes are not unusual for disks larger than 4 GB.
Often, the progress meter does not show a linear progress. Even if it looks
slow near the end (\"95 %\"), please be patient. The formatting tool 
performs various checks. </p>");

    // The Wizard module sets a special protection mode for "Accept"
    // buttons to prevent sloppy calls to Wizard::SetContents()
    // from disabling it. This doesn't apply here, however -
    // switching protection mode off.
    UI::WizardCommand(`ProtectNextButton( false ) );
    
    // hard disk will be made ready for installing Linux
    Wizard::SetContents(_("Preparing Your Hard Disk"),
			`ProgressBar(`id(`progress), " ", 100),
			helptext, false, false);
    };

  y2milestone( "BEGINNING of inst_prepdisk" );

  // check for ppc-PReP/CHRP system, they need a special boot partition
  // todo -> put this in a lib, we need it also in inst_custom_part ...

  MakefsDialog();

  map<string,map> tg = Storage::GetTargetMap();
  integer num_lvm_vg = size( filter( string dev, map disk, tg,
                                     ``(disk["type"]:`CT_UNKNOWN==`CT_LVM)));
  boolean md_active = size(tg["/dev/md","partitions"]:[])>0;
  integer num_evms = 0;

  foreach( string dev, map disk, tg,
      ``{
      if( find( dev, "/dev/evms" )==0 )
	  {
	  num_evms = num_evms + size(filter( map p, disk["partitions"]:[],
					     ``(size(p["mount"]:"")>0)));
	  }
      });
  y2milestone( "num_evms %1 num_lvm_vg %2 md_active %3", num_evms, num_lvm_vg,
               md_active );
  y2milestone( "installation=%1", Stage::initial() );

  integer ret = Storage::CommitChanges();
  if( ret!=0 )
      {
      string txt = sformat(_("Storage modification failed.

System error code was: %1

Failure occurred during following action:
%2
"), ret, Storage::LastAction() );
      Popup::Error( txt );
      }

  if( Storage::CheckForLvmRootFs() && num_lvm_vg>1 )
      {
      map part = Storage::GetEntryForMountpoint( "/" );
      map tmp = Storage::GetDiskPartition( part["device"]:"" );
      string vg_root = substring( tmp["disk"]:"", 5 );
      if( size(vg_root)>0 )
	  {
	  SCR::Write( .lvm.deactivate, "" );
	  SCR::Write( .lvm.activate, vg_root );
	  SCR::Write( .lvm.activate, "" );
	  }
      }

  //mount proc and usbfs during installation
  if( Stage::initial() )
      {
      Storage::WriteFstab();
      string destproc = Installation::scr_destdir+"/proc";
      SCR::Execute (.target.mount, ["proc", destproc], "-t proc");
      if (Hotplug::haveUSB)
	  {
	  SCR::Execute( .target.mount, ["usbfs", destproc +"/bus/usb"],
			"-t usbfs" );
	  }
      destproc = Installation::scr_destdir+"/sys";
      SCR::Execute (.target.mount, ["sysfs", destproc], "-t sysfs");
      }
  if( Stage::initial() && Storage::CheckForEvmsRootFs() )
      {
      string cmd = "/bin/cp -av /dev/evms " + Storage::PathToDestdir("/dev");
      y2milestone( "cmd %1", cmd );
      map m = (map) SCR::Execute(.target.bash_output, cmd );
      y2milestone( "ret %1", m );
      }

  Storage::UpdateTargetMap();

  SCR::Write( .target.ycp, Storage::SaveDumpPath("targetMap_pe"), 
	      Storage::GetTargetMap() );

  y2milestone("END of inst_prepdisk.ycp");

  return `next;
}
