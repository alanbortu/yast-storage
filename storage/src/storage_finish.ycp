/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:
 *  storage_finish.ycp
 *
 * Module:
 *  Step of base installation finish
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "storage";

import "Storage";
import "StorageSettings";
import "StorageUpdate";
import "Mode";
import "Installation";
import "Initrd";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if( size(WFM::Args())>0 && is(WFM::Args(0), string) )
    {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map)WFM::Args(1);
    }

y2milestone ("starting storage_finish");
y2debug("func=%1", func);
y2debug("param=%1", param);

if (func == "Info")
    {
    return (any)$[
	"steps" : 1,
	// progress step title
	"title" : _("Saving file system configuration..."),
	"when" : [ `installation, `live_installation, `update, `autoinst ],
	];
    }
else if (func == "Write")
    {
/*
    list<string> storage_initrdm = (list<string>)Storage::GetRootInitrdModules();
    foreach(string m, storage_initrdm, {
        Initrd::AddModule (m, "");
    });
*/
    if( !Mode::update () )
	{
	SCR::Execute (.target.mkdir, Installation::sourcedir);
        Storage::FinishInstall ();
	}
    else
	{
        StorageUpdate::Update(Installation::installedVersion, Installation::updateVersion);
	}
    if (Storage::CheckForLvmRootFs() )
	{
	SCR::Execute (.target.bash, "/sbin/vgscan");
	}
    Storage::SaveUsedFs();
    StorageSettings::Save();

    if (Mode::installation())
    {
	map part = Storage::GetEntryForMountpoint("/");
	if (part["used_fs"]:`unknown == `btrfs)
	{
	    y2milestone("configuring snapper");
	    if ((boolean) SCR::Execute(.snapper.create_config, $[ "config_name" : "root", "subvolume" : "/", "fstype" : "btrfs" ]))
		SCR::Write(.sysconfig.yast2.USE_SNAPPER, "yes");
	}
    }

    }
else
    {
    y2error ("unknown function: %1", func);
    ret = nil;
    }

y2debug("ret=%1", ret);
y2milestone("storage_finish finished");
return ret;

} /* EOF */
