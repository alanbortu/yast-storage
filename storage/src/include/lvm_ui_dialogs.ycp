/**
 * File:
 *   lvm_ui_dialogs.ycp
 *
 * Module: 
 *    configuration of lvm: lib for the user interface
 *    - contains only dialogs    
 *
 * Summary:
 *
 * Authors:
 *   mike <mike@suse.de>
 *
 *
 * $Id$
 *
 */


{

textdomain "storage";

import "Partitions";

include "ui/common_popups.ycp";
include "partitioning/custom_part_lib.ycp";
include "partitioning/custom_part_dialogs.ycp";
include "partitioning/lvm_ui_lib.ycp";

global define void handle_max( integer stripe, string max_text )
    ``{
    y2milestone( "stripe %1", stripe );
    UI::ChangeWidget(`id("max_size"), `Enabled, stripe==1 );
    UI::ChangeWidget(`id("max_text"), `Value, stripe==1?max_text:"" );
    }
    
  //----------------------------------------------------------------------------------------
    
  global define DlgCreateEditLogicaVolume( string  create_or_edit,
					   map     Lv,
					   integer max_size,
					   string  vgname,
					   list    lvs,
					   map     file_systems,
					   boolean installation,
					   string  dev,
					   integer pesize )

    ``{
    y2milestone( "dev=%1 pesize=%2 max_size=%3", dev, pesize, max_size );

    integer new_size     = 0;
    if( haskey( Lv, "lv_size" ) )
	{
	new_size = Lv["lv_size"]:0;
	}
    else
	{
	new_size = Lv["size_byte"]:0;
	}
    integer old_size     = Lv["ori_length"]:new_size;
    string  curr_size    = ByteToHumanStringWithZero(new_size);
    old_size = kmgt_str_to_byte(curr_size);
    string  volume_name  = Lv["nr"]:"";
    integer stripes      = Lv["stripes"]:1;

    list stripes_poss = [
			  `item(`id(1), "1",  stripes == 1 ),
			  `item(`id(2), "2",  stripes == 2 ),
			  `item(`id(3), "3",  stripes == 3 ),
			  `item(`id(4), "4",  stripes == 4 ),
			  `item(`id(5), "5",  stripes == 5 ),
			  `item(`id(6), "6",  stripes == 6 ),
			  `item(`id(7), "7",  stripes == 7 ),
			  `item(`id(8), "8",  stripes == 8 )
			];
    
    string lv_size      = "";   
     
    string  heading        = "";
    boolean is_create_mode = false;
    boolean is_resize_mode = false;
    term    ui_volume_name = `Dummy();
    any     c_ret          = `cancel;
     
    // header for input field size of Logical volume 
    string size_txt = sformat(_("&Size: (e.g., %1 %2)"), 
			      ByteToHumanStringWithZero(4196*1024*1024),
			      ByteToHumanStringWithZero(210*1024*1024));
    if( create_or_edit != "create" )
	{
	max_size = max_size+new_size;
	}
    max_size = max_size-1025;
    string max_text = sformat(_("max = %1 "), 
			      ByteToHumanStringWithZero(max_size));


    if( create_or_edit == "create" )
        {
	// popup heading 
	heading        = _("Create Logical Volume");
	is_create_mode = true; 
	ui_volume_name = `VBox( `TextEntry(`id("volume_name"),
					   // choose name of current volume group
					   _("Logical volume &name "),
					   volume_name),
				`Left(`Label(_("(e.g. var, opt)")))
			      );
	}
    else if ( create_or_edit == "edit" )
        {
	// popup heading 
	heading = _("Edit Logical Volume");
	is_create_mode = false;
			   // display name of current volume group
	// display name of current volume group
	ui_volume_name = `VBox( `Label(""),
				`HBox(`Label( _("Logical volume name: ")),
				      `Heading(`opt(`outputField), volume_name ),
				      `HStretch()
				     ));
	}
    else if ( create_or_edit == "resize" )
	{
	// popup heading 
	heading = _("Edit Logical Volume");
	is_create_mode = false;
	is_resize_mode = true;
	// display name of current volume group
	ui_volume_name = `VBox( `Label(""),
				`HBox(`Label( _("Logical volume name: ")),
				      `Heading(`opt(`outputField), volume_name ),
				      `HStretch()
				     )
			      );
	stripes_poss = [ `item(`id(1), "-", true) ];
	}
    else
	{
	// internal error message 
	heading = _("INTERNAL ERROR");
	}
 
    UI::OpenDialog(
	`opt(`decorated ),
	`HBox(`HWeight(30, 
	          `HBox(
		        `HSpacing(1),
		        `HStretch(),
			`VBox(
			      `Heading(heading),
			      `VStretch(),
			      `VSpacing(1),
			      `HBox(
				    FormatDlg( Lv, file_systems ),
				    `HStretch(),
				    `HSpacing(2),
				    `VBox(
					  `Top(`Left(ui_volume_name)),
					  `Top(`VBox( `TextEntry(`id("size"), size_txt, curr_size),
						      `HBox(
							    // set size to maxsize
							    `Left(`Label( `id("max_text"), max_text )),
							    `PushButton( `id("max_size"), _("ma&x")))
						      
					      )),
					  `VStretch(),
					  `Left(`ComboBox( `id("stripes"), `opt(`hstretch,`notify),
							   _("Stri&pes"), stripes_poss )),
					  `VStretch(),
					  `VSpacing(1),
					  `ReplacePoint( `id(`mount_dlg_rp), 
					                 MountDlg(Lv, []))
					  )
				    ),
			      `VStretch(),  
			      `VSpacing(1),
			      `HBox(
				    // Ok button
				    `PushButton(`id(`ok), `opt(`default), OKButtonLabel()  ),
				    // Cancel button
				    `PushButton(`id(`cancel), CancelButtonLabel() )
				   )
			      ),
			`HStretch(),
			`HSpacing(1)
			)
	       )));


      // configure main dialog for the first call

      UI::ChangeWidget( `id("stripes"), `Enabled, is_create_mode );
      handle_max( stripes, max_text );
  
      ////////////////////////////////////////////////////////////////////
      // User mainloop for dialog
      ////////////////////////////////////////////////////////////////////
      
      boolean input_is_ok = true;
      map retval = eval(Lv);

      HandlePartWidgetChanges( true, `ok, file_systems, Lv, retval );

      repeat
      {
	    input_is_ok  = true;
	    
	    c_ret = UI::UserInput();

	    /////////////////////////////////////////////////////////
	    if( c_ret == "stripes")
		{
		stripes = UI::QueryWidget(`id("stripes"), `Value);
		handle_max( stripes, max_text );
		continue;
		}

	    /////////////////////////////////////////////////////////
	    // stripes
	    if( c_ret == "max_size")
		{
		UI::ChangeWidget(`id("size"), `Value, ByteToHumanStringWithZero(max_size));
		continue;
		}

	    if( ret != `cancel )
		{
		HandlePartWidgetChanges( false, c_ret, file_systems, Lv, 
		                         retval );
		}
	    
	    if ( is_create_mode ) 
		{
		volume_name = UI::QueryWidget(`id("volume_name"),  `Value);
		volume_name = deletechars( volume_name, " \t" );
		}

	    stripes = UI::QueryWidget(`id("stripes"), `Value);
	    lv_size = UI::QueryWidget(`id("size"),    `Value);
	   
	    y2debug("STRI ---- i%1i", stripes);
	    if( c_ret==`ok )
		{
		new_size = kmgt_str_to_byte(lv_size);
		
		if ( !check_max_size(new_size, max_size) )
		    {
		    input_is_ok = false;
		    continue;
		    }
		y2milestone( "new_size %1 old_size %2", new_size, old_size );

		if( is_resize_mode && !retval["format"]:false && 
		    new_size!=old_size)
		    {
		    map possible = FileSystems::IsResizable( retval["used_fs"]:`unknown );
		    if( new_size < old_size )
			{
			if( !possible["shrink"]:false )
			    {
			    if( !FsysCannotShrinkWarning() )
				{
				UI::ChangeWidget(`id("size"), `Value,
						 curr_size );
				continue;
				}
			    }
			else if( retval["used_fs"]:`unknown == `reiser )
			    {
			    if( !FsysShrinkReiserWarning() )
				{
				UI::ChangeWidget(`id("size"), `Value,
						 curr_size );
				continue;
				}
			    }
			}
		    else if( new_size > old_size )
			{
			if( !possible["extend"]:false )
			    {
			    if( !FsysCannotGrowWarning() )
				{
				UI::ChangeWidget(`id("size"), `Value,
						 curr_size );
				continue;
				}
			    }
			}
		    }

		if ( is_create_mode )
		    {
		    if( !icheck_volume_name(volume_name) )
			{
			input_is_ok = false;
			// Errorpopup
			// xgettext:no-c-format
			UI::ErrorPopup(_("Check your volume name, use \"opt\", \"var\" ...
don't use ;/\`',!\"%#"));
			UI::SetFocus(`id("volume_name"));
			continue;
			}
		    else 
			{
			if( contains( lvs, volume_name ) )
			    {
			    input_is_ok = false;
			    // Errorpopup
			    UI::ErrorPopup(sformat(_("A logical volume named \"%1\" already exists
in volume group \"%2\". Choose another name
or cancel this dialog.
"), volume_name, vgname ));
			    UI::SetFocus(`id("volume_name"));
			    continue;
			    }
			}   
		    }

		map ret_mp = CheckOkMount( dev, Lv, retval );
		if( !ret_mp["ok"]:false )
		    {
		    if( ret_mp["field"]:`none != `none )
			UI::SetFocus(`id( ret["field"]:`none ));
		    input_is_ok = false;
		    continue;
		    }

		ret_mp = CheckCryptOk( retval );
		}

	    /////////////////////////////////////////////////////////
	    retval["changed_size"] = new_size!=old_size;
	    retval["stripes"] = stripes;
	    retval["lv_size"] = new_size;
	    retval["nr"] = volume_name;
	    retval["device"] = Storage::GetDeviceName( "/dev/"+vgname, 
	                                               volume_name );
	    retval["region"] = [0, (new_size+pesize-1)/pesize ];
	    if( new_size!=old_size && !haskey( retval, "ori_length"))
		{
		retval["ori_length"] = old_size;
		}
	    
      } until ( (c_ret==`ok&&input_is_ok) || c_ret == `cancel );

      UI::CloseDialog();
      
      y2milestone( "retval=%1", retval );
      
      if (c_ret != `cancel && input_is_ok )
      {
	  return( retval );
      }
      else
      {
	  return( nil );
      }
    };
    


 //////////////////////////////////////////////////////////////////////////////
 // Dialog "Create a Volume Group
 //////////////////////////////////////////////////////////////////////////////
	 
global define DlgCreateVolumeGroup( list vgm_list )
    ``{
    string vgname = "";
    string pesize = "";
   
    UI::OpenDialog(
    `opt(`decorated ),
    `HBox(
	`HSpacing(2),
	`VBox(
	      // popup header
	      `Heading(_("Create a Volume Group")),
	      // popup description
	      `Label( _("Now we have to create a volume group.
Typically you don't have to change anything,
but if you are an expert, feel free to change
our defaults:")),
	      // textentry description LVM
	      `TextEntry(`id("vgname"), _("Volume Group &Name:"), size(vgm_list)==0?"system":""),
	      // textentry description LVM
	      `TextEntry(`id("pesize"), _("&Physical Extent Size"), "4M"),
	      `VSpacing(1),
	      `HBox(
		    // Ok button
		    `PushButton(`id(`ok), `opt(`default), OKButtonLabel()  ),
		    // Cancel button
		    `PushButton(`id(`cancel), CancelButtonLabel() )
		    ),
	      `VSpacing(0.5)
	      ),
	`HSpacing(2)
	)
    );


    any     ret         = nil;
    boolean input_is_ok = false;
      
    repeat
	{
	ret = UI::UserInput();

	vgname = UI::QueryWidget(`id("vgname"),  `Value);
	vgname = deletechars( vgname, " \t" );
	pesize = UI::QueryWidget(`id("pesize"),  `Value);

	if( ret != `cancel )
	    {
	    input_is_ok = icheck_vgname(vgname) && icheck_pesize(pesize);
	     
	    if( !icheck_pesize(pesize) )
	        {
		// Errorpopup
		UI::ErrorPopup(_("The data entered is invalid.
Insert a physical extent size from
8KB to 512MB in powers of 2, for example, \"4M\" or \"512K\"
"));
		}

	     if( !icheck_vgname(vgname) )
		 {
		 // Errorpopup
		 UI::ErrorPopup(_("The data entered is invalid.
Insert a group name like \"system\" or \"test\".
Do not use ;/`, in your group name.
"));
		 }
	  
	     if( contains( vgm_list, vgname ) )
		 {
		 // Errorpopup
		 UI::ErrorPopup(sformat(_("The volume group \"%1\" already exists.
Choose a different name
or cancel this dialog.
"), vgname ));
		 input_is_ok = false;
		 }
	     }
	  
	} until ( input_is_ok || ret == `cancel );

    UI::CloseDialog();
	     
    if (ret == `ok )
	{
	return( $[  "vgname" : vgname, "pesize" : pesize ] );
	}
    else
	{
	return( nil );
	}
    
    };

}
