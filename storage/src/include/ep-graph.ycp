/**
 * File:	ep-graph.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Arvin Schnell <aschnell@suse.de>
 */
{
    textdomain "storage";


    void EpContextMenuGraph()
    {
	symbol widget = ContextMenu::Simple([ `item(`id(`add_raid), _("Add RAID")),
					      `item(`id(`add_lvmvg), _("Add Volume Group")) ]);

	// TODO
    }


    void CreateGraphPanel(any user_data)
    {
	string filename = Directory::tmpdir + "/storage.gv";
	Storage::SaveGraph(filename);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  // dialog heading, graph is the mathematic term for
				  // a set of notes connected with edges
				  `IconAndHeading(_("Graph"), StorageIcons::graph_icon),
				  `Graph(`id(`graph), `opt(`contextMenu), filename, "dot"),
				  `HBox(
				      // button text
				      `PushButton(`id(`export), _("Export Graph...")),
				      `HStretch()
				      )
				  ))
	    );

	// helptext
	string helptext = _("<p>This view shows a graph.</p>");

	Wizard::RestoreHelp(helptext);
    }


    void HandleGraphPanel(any user_data, map event)
    {
	void GotoDevice(string device)
	{
	    TreePanel::SwitchToNew(device);
	    UI::SetFocus(UI::WidgetExists(`id(`table)) ? `id(`table) : `id(`text));
	}

	switch (Event::IsWidgetContextMenuActivated(event))
	{
	    case `graph:
	    {
		string node = (string) UI::QueryWidget(`id(`graph), `Item);

		if (isempty(node))
		    EpContextMenuGraph();
		else if (String::StartsWith(node, "device:"))
		    EpContextMenuDevice(substring(node, 7));

		// TODO: update graph
	    }
	    break;
	}

	switch (Event::IsWidgetActivated(event))
	{
	    case `graph:
	    {
		string node = (string) UI::QueryWidget(`id(`graph), `Item);

		if (String::StartsWith(node, "device:"))
		    GotoDevice(substring(node, 7));
		else if (String::StartsWith(node, "mountpoint:"))
		    GotoDevice(substring(node, 11));
	    }
	    break;

	    case `export:
	    {
		string filename = UI::AskForSaveFileName("/tmp", "*.gv", "Save as...");
		if (filename != nil)
		{
		    if (!Storage::SaveGraph(filename))
		    {
			// error popup
			Popup::Error(_("Saving graph file failed."));
		    }
		}
	    }
	    break;
	}
    }
}
