/**
 * File:
 *   nfs.ycp
 *
 * Module:
 *   Configuration nfs mounts setup
 *
 * Summary:
 *   Functions for nfs mounts file setup
 *
 * Authors:
 *   Thomas Fehr <fehr@suse.de>
 *
 * $Id:$
 *
 */

{

  textdomain "storage";

  import "Wizard";
  import "Storage";
  import "FileSystems";
  import "Partitions";
  import "Label";
  
  include "partitioning/partition_defines.ycp";
  include "partitioning/custom_part_dialogs.ycp";
  include "partitioning/custom_part_lib.ycp";

/**
 * NfsDlgHelp
 * @return string
 */
define string NfsDlgHelp( string sv, string sp )
    ``{
    // help text richtext format
    // %1 is replaced by description text for server name
    string helptext = sformat( _("
<p><b>%1:</b><br>This must be the name of a NFS server.
The server needs to be accessible.</p>
"), sv );

    // help text richtext format, continued
    // %1 is replaced by description text for nfs path
    helptext = helptext + sformat( _("
<p><b>%1:</b><br>This is the absolute path exported on the
NFS server.
"), sp );

    return helptext;
    };


define term NfsOptionsDlg( string sv, list<string> sl, string sp, list<string> spl )
    {
    term widget = 
	    `VBox(
		`VSpacing(),
		`MinWidth( 56, `ComboBox( `id(`nfs_server), `opt(`editable), sv, sl )),
		`VSpacing(1),
		`MinWidth( 56, `ComboBox( `id(`nfs_path), `opt(`editable), sp, spl )),
		`VSpacing()
		);
    return widget;
    };


/**
 *  NfsExpertDlg dialog
 *  edit nfs options
 */
define map<string,any> NfsExpertDlg( boolean edit, map<string,any> part, list<string> dlist )
    ``{
    y2milestone( "NfsExpertDlg edit:%1 oart:%2", edit, part );
    y2milestone( "NfsExpertDlg dlist:%1", dlist );
    string caption = "";
    if( edit )
	{
	// heading text
	caption = _("Change NFS Path Setup"); 
	}
    else
	{
	// heading text
	caption = _("Add New NFS Path");
	}

    // label text
    string sv = _("&Name of NFS Server");
    // label text
    string sp = _("Absolute &Path on NFS Server");

    list<string> slp = maplist( string s, dlist, ``(substring(s,search(s,":")+1)));
    slp = toset(slp);
    list<string> sl = maplist( string s, dlist, ``(substring(s,0,search(s,":"))));
    sl = toset(sl);
    y2milestone( "NfsExpertDlg sl:%1", sl );
    y2milestone( "NfsExpertDlg sp:%1", slp );

    term contents = `VBox( `HSpacing( 60 ),
                           `HBox( `HSpacing(2), 
			          NfsOptionsDlg(sv,sl,sp,slp), 
				  `HSpacing(2)
				),
			   `VSpacing(1),
                           `HBox( `HSpacing(2), 
				  `Top(`ReplacePoint( `id(`mount_dlg_rp), 
						      MountDlg( part, [] ))),
				  `HSpacing(30)),
			   `VSpacing(3)
			 );

    contents = `VBox(
		     `Heading(caption),
		     `VSpacing(1),
		     `VStretch(),
		     contents,
		     `VSpacing(1),
		     `VStretch(),
		     `HBox(
			   `PushButton(`id(`ok), `opt(`default), 
				       Label::OKButton()  ),
			   `PushButton(`id(`cancel), Label::CancelButton() )
		    ));



    string ht = NfsDlgHelp( deletechars(sv,"&"),
                            deletechars(sp,"&"));
    UI::OpenDialog( `opt(`decorated ),
		    `HBox( `HWeight(30,`RichText(ht)),
			   `HStretch(),
			   `HSpacing(1),
			   `HWeight(70, contents ),
			   `HSpacing(1),
			   `HStretch()
			 ));

    ////////////////////////////////////////////////////////////////
    // configure main dialog for the first call
    string lsize = ByteToHumanStringWithZero(part["size_k"]:0*1024);

    sl = splitstring( part["device"]:"", ":" );

    UI::ChangeWidget( `id(`nfs_server), `Value, sl[0]:"" );
    UI::ChangeWidget( `id(`nfs_server), `ValidChars, 
                      FileSystems::nchars + "-._" );
    UI::ChangeWidget( `id(`nfs_server), `Enabled, !edit );
    UI::ChangeWidget( `id(`nfs_path), `Value, sl[1]:"" );
    UI::ChangeWidget( `id(`nfs_path), `ValidChars, 
                      FileSystems::nchars + "-._/" );
    UI::ChangeWidget( `id(`nfs_path), `Enabled, !edit );

    map<string,any> retval = part;
    symbol ret = `ok;

    retval = HandlePartWidgetChanges( true, ret, $[], part, retval );

    repeat
	{
	ret = (symbol)UI::UserInput();
	y2milestone( "NfsExpertDlg %1", ret);

	////////////////////////////////////////////////////////////
	if( ret != `cancel )
	    {
	    retval = HandlePartWidgetChanges( false, ret, $[], part, retval );
	    }

	if( ret == `ok )
	    {
	    if( !edit )
		{
		string server = (string)UI::QueryWidget( `id(`nfs_server), `Value);
		string spath = (string)UI::QueryWidget( `id(`nfs_path), `Value);
		y2milestone( "NfsExpertDlg server:%1 path:%2", server, spath );
		if( size(server)==0 )
		    {
		    Popup::Error( sformat(_("The NFS server name \'%1\' is invalid."),server));
		    ret = `again;
		    UI::SetFocus(`id(`nfs_server));
		    continue;
		    }
		if( size(spath)==0 || substring( spath, 0, 1 )!= "/" )
		    {
		    Popup::Error( sformat(_("The NFS path name \"%1\" is invalid.
It must not be empty and must start with a \"/\".
"), spath ));
		    ret = `again;
		    UI::SetFocus(`id(`nfs_path));
		    continue;
		    }
		string dev = server + ":" + spath;
		integer sizeK = Storage::CheckNfsVolume( dev, 
		                                         retval["fstopt"]:"" );
		if( sizeK<=0 )
		    {
		    Popup::Error( sformat(_("The NFS mount
    \"%1\" 
is not accessible.
"), dev ));
		    ret = `again;
		    UI::SetFocus(`id(`nfs_server));
		    continue;
		    }
		retval["device"] = dev;
		retval["size_k"] = sizeK;
		}
	    y2milestone( "NfsExpertDlg retval:%1", retval );
	    map ret_mp = CheckOkMount( part["device"]:"", part, retval );
	    retval = ret_mp["map"]:$[];
	    y2milestone( "NfsExpertDlg ret_mp %1 part %2", ret_mp, part );
	    if( !ret_mp["ok"]:false )
	        {
	        if( ret_mp["field"]:`none != `none )
		    UI::SetFocus(`id( ret_mp["field"]:`none ));
		ret = `again;
		continue;
	        }

	    ret_mp = CheckDeviceFinalOk( retval );
	    if( !ret_mp["ok"]:false )
		{
		ret = `again;
		}
	    else
		{
		retval = ret_mp["map"]:$[];
		}
	    }
        } until( ret == `ok || ret == `cancel || ret == `next ||
		 ret == `back || ret == `abort );

    retval["symbol"] = ret;
    y2milestone( "NfsExpertDlg ret:%1 retval=%2", ret, retval );
    UI::CloseDialog();
    return retval;
    }


/**
 * NfsSetup dialog
 *
 * Provide dialog for settings of nfs related parameters
 */
define symbol NfsSetup( boolean edit )
    ``{
    string id = Storage::GetWizardKey();
    string key = "/dev/nfs";
    y2milestone( "NfsSetup edit %1 id %2", edit, id );
    map<string,any> part = $[];
    map<string,map> tg = Storage::GetTargetMap();
    if( edit )
	{
	part = Storage::GetPartition( tg, id );
	}
    else
	{
	part["type"] = `nfs;
	part["used_fs"] = `nfs;
	part["detected_fs"] = `nfs;
	part["create"] = true;
	}
    y2milestone( "NfsSetup part %1", part );

    list<string> l = maplist( map p, tg["/dev/nfs","partitions"]:[],
                              ``(p["device"]:""));
    part = NfsExpertDlg( edit, part, l );

    symbol ret = part["symbol"]:`next;
    // remove symbol key from data
    part = filter( string key, any value, part, ``( key != "symbol" ));

    if( ret == `ok )
	{
	if( !haskey( tg, "/dev/nfs" ) )
	    tg["/dev/nfs"] = $[ "type" : `CT_NFS, "partitions" : [] ];
	list<map> pl =  tg["/dev/nfs","partitions"]:[];
	if( edit )
	    {
	    integer idx = 0;
	    foreach( map p, pl,
		``{
		if( p["device"]:"" == part["device"]:"" )
		    pl[idx] = part;
		idx = idx + 1; 
		});
	    }
	else
	    pl = add( pl, part );
	tg["/dev/nfs","partitions"] = pl;
	Storage::SetTargetMap( tg );
	}
    y2milestone( "NfsSetup  ret = %1", ret );
    return  ret;
    }

}
