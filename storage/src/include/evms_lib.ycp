/**
 * File:
 *   evms_lib.ycp
 *
 * Module: 
 *    utility functions for evms config
 *
 * Summary:
 *
 * Authors:
 *   Thomas Fehr <fehr@suse.de>
 *
 *
 * $Id$
 *
 */


{

textdomain "storage";

#include "partitioning/signatures.ycp";

import "FileSystems";

//////////////////////////////////////////////////////////////////////
// helptext for evms main dialog 
//////////////////////////////////////////////////////////////////////

define string getEvmsHelptext()
    ``{
    string help_text = "";

 // helptext EVMS partitioning. 
    help_text =  _("<p>The upper part of this dialog contains the container-related functionality. Here, create, edit, and modify EVMS containers. </p>");

    // helptext EVMS partitioning. 
    help_text = help_text + _("<p>
The lower part with the list contains all available EVMS devices.
If at least one EVMS container is available, you can create new 
devices that use the available space of the current container.</p>
");

    return( help_text );
    };

//////////////////////////////////////////////////////////////////////
// evms_pesize_check 
// in: <number>[kKmM][bB]
// 
// return 0 if input is invalid
// 
// pesize is valid   8K to 512M in power of 2
// 8 is 8k
// 16K == 16k == 16KB == 16kb
     
define integer evms_pesize_check( string input, string type )
    ``{
    integer num = kmgt_str_to_byte( input );
    if( findfirstnotof( input, "0123456789 " ) == nil )
	num = num*1024;

    integer ret = num;

    if( ret % 1024 != 0 )
	ret = 0;
    else
	{
	while( num>1 )
	    {
	    if( num%2 != 0 )
		ret = 0;
	    else
		num = num/2;
            }
        }
    y2milestone( "evms_pesize_check ret %1", ret );
    if( ret < 8*1024 || ret > 512*1024*1024 )
        {
        ret = 0;
        }
    y2milestone( "evms_pesize_check ret %1", ret );
    if( ret==0 )
	{
	// error popup text
	Popup::Error(_("The data entered is invalid.
Insert a physical extent size from
8KB to 512MB in powers of 2, for example, \"4M\" or \"512K\"
"));
	}
    return( ret );
    };

//////////////////////////////////////////////////////////////////////
// checks if name is a valid container name 
define boolean evms_check_name( string name )
    ``{
    if ( size( name ) == 0 ) return( false );
    return( ( findfirstof( name, " ;/`'Â´!,\"%#" ) == nil ) );
    }


define list add_size_info( list pvlist, integer cyl_size )
    ``{
    return( maplist( map p, pvlist,
	``{
	integer s = cyl_size * p["region",1]:0;
	p["size"] = s;
	p["size_str"] = ByteToHumanStringWithZero(s);
	return( p );
	})) ;
    }

define list get_pvlist( map tg, string name )
    {
    list pv = [];
    y2milestone( "get_pvlist name %1", name );
    foreach( string k, map e, tg,
	``{
	if( e["is_evms"]:false )
	    {
	    if( !e["is_evms_container"]:false )
		{
		list tmp = filter( map p, e["partitions"]:[],
				   ``(p["evms_vol"]:""==name ||
				      (size(p["evms_vol"]:"")==0 &&
				       size(p["mount"]:"")==0)));
		tmp = add_size_info( tmp, e["cyl_size"]:0 );
		y2milestone( "key %1 tmp %2", k, tmp );
		pv = merge( pv, tmp );
		}
	    }
	else
	    {
	    list tmp = filter( map p, e["partitions"]:[],
			       ``(size(name)>0&&p["evms_vol"]:""==name ));
	    tmp = add_size_info( tmp, e["cyl_size"]:0 );
	    y2milestone( "key %1 tmp %2", k, tmp );
	    pv = merge( pv, tmp );
	    }
	});
    pv = sort( map a, map b, pv, ``(a["device"]:""<b["device"]:""));
    pv = maplist( map p, pv, 
	``{
	string d = substring( p["device"]:"", 5 );
	if( find( d, "evms/" )==0 )
	    {
	    d = substring( d, 5 );
	    }
	p["device"] = d;
	return( p );
	});
    y2milestone( "pv %1", pv );
    return( pv );
    }

define list get_table_entries( list pvlist, string name )
    ``{
    list ret = maplist( map p, pvlist,
	``{
	return( `item( `id(p["device"]:""), p["device"]:"", p["size_str"]:"",
	        size(p["evms_vol"]:"")>0?name:"" ));
	});
    y2milestone( "get_table_entries ret %1", ret );
    return( ret );
    }

define integer get_container_size( map co, list pvlist )
    ``{
    integer ret = co["cyl_count"]:0 * co["cyl_size"]:0;
    foreach( integer e, co["added"]:[],
	``{
	ret = ret + pvlist[e,"size"]:0;
	});
    foreach( integer e, co["removed"]:[],
	``{
	ret = ret - pvlist[e,"size"]:0;
	});
    y2milestone( "get_container_size ret %1", ret );
    return( ret );
    }

define map dlg_modify_container( map tg, map co, boolean create )
    ``{
    // popup header
    string head = _("Modify Existing EVMS Container");
    if( co["create"]:false )
	{
	if( create )
	    {
	    // popup header
	    head = _("Create EVMS Container");
	    }
	else
	    {
	    // popup header
	    head = _("Modify EVMS Container");
	    }
	}
    string txt =
	      // popup description
_("Change the settings for an EVSM container.
Container type, PE size, and container name can only be set when creating
the container.
");

    term dlg = 
	`HBox(
	    `HSpacing(2),
	    `VBox(
		  `Heading(head),
		  `Label( txt ),
		  // label text
		  `HBox(
		      `HSpacing(1),
		      `ComboBox( `id(`type), `opt(`notify), _("Container Type"),
						      // label text
			         [ `item( `id("lvm"), _("Linux LVM") ),
						      // label text
				   `item( `id("aix"), _("AIX LVM") )] ),
			  
		      `HSpacing(2),
		      // label text
		      `TextEntry( `id(`name), `opt(`notify), 
		                  _("Container &Name"), co["name"]:"" ),
		      `HSpacing(2),
		      // label text
		      `TextEntry(`id(`pesize), _("&Physical Extent Size"), ""),
		      `HSpacing(1)
		      ),
		  `Left(`HBox( 
		      `HSpacing(1),
		      `Label( _("Container Size:") ),
		      `Label( `id(`size), "" ),
		      `HSpacing(1)
		       )),
		  `VSpacing(1),
		  `HBox( 
		      `HSpacing(2),
		      `VBox(
			  `HBox( 
			      `Table(`id(`pv_table), `opt(`notify),
				     // header text
				     `header(_("Device"), `Right(_(" Size")), 
					     // header text
					     _(" Container")),
				     [] ),
			      `VSpacing(10)
			      ),
			  `VSpacing(1),
			  `HBox(
			      // button text
			      `PushButton(`id(`pv_add), _("&Add Volume")),
			      // button text
			      `PushButton(`id(`pv_delete), _("&Remove Volume"))
			      )
			  ),
		      `HSpacing(2)
		      ),
		  `VSpacing(1),
		  `HBox(
		      // Ok button
		      `PushButton(`id(`ok), `opt(`default), Label::OKButton() ),
		      // Cancel button
		      `PushButton(`id(`cancel), Label::CancelButton() )
		       ),
		  `VSpacing(0.5)
		 ),
	    `HSpacing(2)
	    );

    UI::OpenDialog( `opt(`decorated ), dlg );

    string name = co["name"]:"";
    string typename = "lvm";

    if( findlastof( name, "/" ) != nil )
	name = substring( name, findlastof( name, "/" )+1 );

    if( find( co["name"]:"", "aix/" )==0 )
	{
	typename = "aix";
	}

    UI::ChangeWidget( `id(`name), `Value, name );
    if( co["created"]:false )
	{
	UI::ChangeWidget( `id(`name), `ValidChars, 
	                  FileSystems::nchars + "-._:" );
	}
    else
	{
	UI::ChangeWidget( `id(`name), `Enabled, false );
	UI::ChangeWidget( `id(`pesize), `Enabled, false );
	}
    UI::ChangeWidget( `id(`pesize), `Value, 
                      ByteToHumanStringWithZero(co["cyl_size"]:0 ));
    UI::ChangeWidget( `id(`type), `Value, typename );

    list pvlist = get_pvlist( tg, co["name"]:"" );
    y2milestone( "dlg_modify_container pvlist %1", pvlist );
    UI::ChangeWidget( `id(`pv_table), `Items, 
                      get_table_entries( pvlist, co["name"]:"" ));
    string s = ByteToHumanStringWithZero( get_container_size( co, pvlist ) );
    UI::ChangeWidget( `id(`size), `Value, s );
    UI::RecalcLayout();
    any ret = nil;

    repeat
	{
	ret = UI::UserInput();

	y2milestone( "dlg_modify_container ret %1", ret );

	if( ret == `type )
	    {
	    typename  = (string)UI::QueryWidget(`id(`type), `Value );
	    co["name"] = typename + "/" + name;
	    UI::ChangeWidget( `id(`pv_table), `Items, 
			      get_table_entries( pvlist, co["name"]:"" ));
	    }

	if( ret == `name )
	    {
	    name = (string)UI::QueryWidget(`id(`name), `Value );
	    name = deletechars( name, " \t" );
	    co["name"] = typename + "/" + name;
	    if( size( filter( map p, pvlist, ``(size([p["evms_vol"]:"")>0)))>0)
		{
		UI::ChangeWidget( `id(`pv_table), `Items, 
				  get_table_entries( pvlist, co["name"]:"" ));
		}
	    }

	if( ret == `pv_add )
	    {
	    }

	if( ret == `ok )
	    {
	    if( typename == "aix" )
		{
		co["manager"] = "AixRegMgr";
		}
	    else
		{
		co["manager"] = "LvmRegMgr";
		}

	    co["cyl_size"] = 
		evms_pesize_check( (string)UI::QueryWidget( `id(`pesize), 
		                                            `Value),
				   type );

	    y2milestone( "dlg_modify_container co %1 type %2", co, type );

	    if( co["cyl_size"]:0 == 0 )
	        {
		ret = `again;
		}

	    if( ret==`ok && !evms_check_name(name) )
		{
		// error popup text
		Popup::Error(_("The data entered is invalid.
Insert a container names like \"system\" or \"test\".
Do not use ;/`, in this name.
"));
		ret = `again;
		}
	  
	    if( ret==`ok && 
	        (haskey( tg, "/dev/evms/" + co["name"]:"" ) ||
	         haskey( tg, "/dev/" + name )) )
		{
		// error popup text
		Popup::Error(sformat(_("The container named \"%1\" already exists.
Choose a different name
or cancel this dialog.
"), name ));
		ret = `again;
		}
	    }
	} until( ret == `ok || ret == `cancel );

    UI::CloseDialog();
	     
    if (ret == `ok )
	{
	return( co );
	}
    else
	{
	return( $[] );
	}
    };

define map add_evms_container( map tg, boolean first )
    ``{
    map co = $[ "manager" : "LvmRegMgr",
		"cyl_count" : 0,
                "cyl_size" : 4 * 1024 * 1024,
		"create" : true,
		"is_evms" : true,
		"is_evms_container" : true,
		"name" : first?"lvm/system":"",
		"partitions" : []
	      ];

    co = dlg_modify_container( tg, co, true );

    string co_name = "";
    // has the user cancelled the dialog? 
    if( size(co)>0 )
	{
	co_name = co["name"]:"";

	co = filter( string k, any e, co, ``(k!="name") );
	y2milestone( "co %1", co );

	tg[ "/dev/evms/"+co_name ] = co;
	}

    return( $[
		"ok"      : size(co)>0,
		"targets" : tg,
		"name"    : co_name
	     ]);
    };


//////////////////////////////////////////////////////////////////////
// show a new list of containers
//////////////////////////////////////////////////////////////////////

define void new_co_list( list co_list )
    ``{
    UI::ReplaceWidget(`id(`rcont), `ComboBox(`id(`cont), `opt(`notify),
		      // button text
		      _("EVMS &Container"), co_list ));
    };

define integer get_co_size( map co )
    ``{
    integer sum_byte = co["cyl_size"]:1 * co["cyl_count"]:0;
    return( sum_byte );
    }

define void new_co_size( map co )
    ``{
    integer total = get_co_size(co);
    integer free = co["cyl_size"]:1 * co["cyl_free"]:0;
    y2milestone( "total %1 free %2", total, free );
    string total_s = ByteToHumanStringWithZero( total );
    string free_s = ByteToHumanStringWithZero( free );
    UI::ChangeWidget( `id(`co_size), `Value, total_s );
    UI::ChangeWidget( `id(`co_free), `Value, free_s );
    if( UI::WidgetExists( `id(`co_graph)) )
	{
	UI::ChangeWidget( `id(`co_graph), `Labels,
	                  // e.g. %1 is replaced with a size e.g.. "used 5 GB"
			  [ sformat( _("used\n%1"), 
				     ByteToHumanStringWithZero(total-free)),
	                  // e.g. %1 is replaced with a size e.g.. "free 1 GB"
			    sformat( _("free\n%1"), free_s ) ] );
	UI::ChangeWidget( `id(`co_graph), `Values, [ (total-free)/1024/1024, 
	                                              free/1024/1024 ] );
	}
    UI::RecalcLayout();
    }

define term get_bargraph_if_possible()
    ``{
    term ret = `Empty();
    if( UI::HasSpecialWidget( `BarGraph ))
        {
        ret = `Left(`BarGraph( `id(`co_graph), `opt(`hstretch),
                               [ 0, 10 ], [ "", ""]) );
        }
    y2milestone( "get_bargraph_if_possible ret %1", ret );
    return( ret );
    };

define map get_co_map( string current, map tg )
    ``{
    return( tg["/dev/evms/"+current]:$[] );
    }

define list get_containers( map tg )
    ``{
    list ret = [];
    foreach( string k, map e, tg, 
	``{
	if( e["is_evms_container"]:false && !e["delete"]:false )
	    {
	    ret = add( ret, substring( k, 10 ));
	    }
	});
    y2milestone( "get_containers ret %1", ret );
    return( ret );
    }

define list get_evms_volumes( map tg )
    ``{
    list tmp = [];
    foreach( string k, map e, tg,
	``{
	if( find( k, "/dev/evms" )==0 && !e["is_evms_container"]:false )
	    {
	    tmp = add( tmp, k );
	    }
	});
    list keys = sort( tmp );
    tmp = [];
    foreach( string k, map e, tg,
	``{
	if( find( k, "/dev/evms" )==0 && e["is_evms_container"]:false )
	    {
	    tmp = add( tmp, k );
	    }
	});
    keys = merge( keys, sort(tmp) );
    list parts = [];
    y2milestone( "get_evms_volumes keys %1", keys );
    foreach( string k, keys,
	``{
	list pa = filter( map p, tg[k,"partitions"]:[], ``(!p["delete"]:false));
	pa = maplist( map p, pa,
	    ``{
	    p["size"] = 
		ByteToHumanStringWithZero( p["region",1]:0*tg[k,"cyl_size"]:0 );
	    return( p );
	    });
	parts = merge( parts, sort( map x, map y, pa,
	                            ``(x["nr"]:(any)""<y["nr"]:(any)"")));
	});
    y2milestone( "get_evms_volumes parts %1", parts );
    list ret = maplist( map p, parts, 
	``{
	return( `item( `id(p["device"]:""), 
	               p["device"]:"", 
		       p["size"]:"",
		       p["mount"]:"",
		       "" ));
	});
    y2milestone( "get_evms_volumes ret %1", ret );
    return( ret );
    }

}
