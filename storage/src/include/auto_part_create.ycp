/**
 * Module:		auto_part_create.ycp
 *
 * Authors:		Andreas Schwab (schwab@suse.de)
 *			Klaus Kämpf (kkaempf@suse.de)
 *
 * Purpose:		This module creates the neccessary partitions
 *			in the targetMap
 *
 * $Id$
 *
 * used globals
 *
 * defined functions
 */
{
    textdomain "storage";

    import "Storage";
    import "Partitions";
    import "ProductFeatures";

include "partitioning/do_proposal_flexible.ycp";

boolean create_partitions( map<string,map> tgmap, map disk, list<map> partitions )
    {
    y2milestone( "create_partitions disk:%1",
                 haskey(disk,"partitions")?remove(disk,"partitions"):disk );
    y2milestone( "create_partitions partitions %1", partitions );
    boolean ret = false;
    boolean has_flex = has_flex_proposal();
    y2milestone( "create_partitions flex %1", has_flex );
    disk["partitions"] = partitions;
    map keep = find( map p, partitions, 
		     ``(!p["delete"]:false&&p["type"]:`unknown==`free));
    if( has_flex )
	{
	map flex = do_flexible_disk( disk );
	if( flex["ok"]:false )
	    partitions = flex["disk","partitions"]:[];
	}
    else
	{
	integer num_del_exist = size(filter(map p, partitions,
					    ``(p["type"]:`unknown!=`free&&
					       p["delete"]:false)));
	integer num_del_free = size(filter(map p, partitions,
					    ``(p["type"]:`unknown==`free&&
					       p["delete"]:false)));
	map r = can_swap_reuse( disk["device"]:"", partitions, tgmap );
	if( haskey( r, "partitions" ))
	    partitions = r["partitions"]:[];
	else if( haskey( r, "targets" ))
	    tgmap = r["targets"]:$[];

	y2milestone( "create_partitions num_del_exist %1 num_del_free %2 swap_reuse %3", 
	             num_del_exist, num_del_free, size(r)>0 );
	y2milestone( "create_partitions keep %1", keep );
	if( keep!=nil && size(r)>0 && num_del_exist==1 && num_del_free==0 )
	    {
	    y2milestone( "create_partitions single special" );
	    boolean first = true;
	    partitions = maplist( map p, partitions, 
				  ``{
				  if( p["delete"]:false && first )
				      {
				      p = remove( p, "delete" );
				      first = false;
				      p["format"] = true;
				      p["used_fs"] = Partitions::default_fs;
				      p["mount"] = "/";
				      y2milestone( "create_partitions single p %1", p );
				      }
				  return( p );
				  });
	    }
	else
	    {
	    partitions = get_proposal( size(r)>0, disk );
	    }
	}
    y2milestone( "create_partitions %1", partitions );
    keep = find( map p, partitions, 
		 ``(!p["delete"]:false&&!p["create"]:false));
    partitions = filter( map p, partitions, ``(p["type"]:`unknown!=`free));
    y2milestone( "create_partitions keep %1", keep );
    Storage::SetWholeDisk( keep == nil );
    partitions = maplist( map p, partitions,
	``{
	if( size(p["mount"]:"")>0 && !p["delete"]:false )
	    p["fstopt"] = FileSystems::DefaultFstabOptions( p );
	return( p );
	});
    ret = size(partitions)>0;
    if( ret )
	{
	tgmap[disk["device"]:"","partitions"] = partitions;
	tgmap = Storage::SpecialBootHandling(tgmap);
	Storage::SetTargetMap( tgmap );
	}
    y2milestone( "create_partitions ret %1", ret );
    return( ret );
    }; // create_partitions

}
