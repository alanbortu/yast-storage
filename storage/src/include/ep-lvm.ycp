/**
 * File:        ep-lvm.ycp
 * Package:     yast2-storage
 * Summary:     Expert Partitioner
 * Authors:     Arvin Schnell <aschnell@suse.de>
 */
{
    textdomain "storage";


    include "partitioning/ep-lvm-dialogs.ycp";
    include "partitioning/ep-lvm-lib.ycp";


    void CreateLvmMainPanel(any user_data)
    {
	symbol Predicate(map disk, map partition)
	{
	    return StorageFields::PredicateDiskType(disk, partition, [`CT_LVM]);
	}

	list<symbol> fields = StorageSettings::FilterTable([ `device, `size, `format, `type,
							     `mount_point, `mount_by, `used_by,
							     `lvm_metadata, `pe_size, `stripes ]);

	map<string, map> target_map = Storage::GetTargetMap();

	term table_header = StorageFields::TableHeader(fields);
	list<term> table_contents = StorageFields::TableContents(fields, target_map, Predicate);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `IconAndHeading(_("Volume Management"), lvm_icon),
				  `Table(`id(`table), `opt(`keepSorting, `notify),
					 table_header, table_contents),
				  `HBox(
				      `PushButton(`id(`add), _("Add Volume Group...")),
				      `HStretch()
				      )
				  )
			      )
	    );

	// helptext
	string helptext = _("<p>This view shows all LVM volume groups and
their logical volumes.</p>");

	Wizard::RestoreHelp(helptext + StorageFields::TableHelptext(fields));
    }


    void HandleLvmMainPanel(any user_data, symbol widget)
    {
	switch (widget)
	{
	    case `add:
		EpCreateVolumeGroup();
		break;
	}
    }


    void CreateLvmVgOverviewTab(any user_data)
    {
	string device = (string) user_data;

	map<string, map> target_map = Storage::GetTargetMap();

	list<symbol> fields = StorageSettings::FilterOverview([ `heading_device, `device, `size,
								`heading_lvm, `lvm_metadata, `pe_size ]);

	UI::ReplaceWidget(`tab_panel,
			  `VBox(
			      `HStretch(),
			      StorageFields::Overview(fields, target_map, device),
			      `HBox(
				  `PushButton(`id(`resize), _("Resize...")),
				  `PushButton(`id(`delete), _("Delete...")),
				  `HStretch()
				  )
			      )
	    );

	// helptext
	string helptext = _("<p>This view shows detailed information about the
selected volume group.</p>");

	Wizard::RestoreHelp(helptext + StorageFields::OverviewHelptext(fields));
    }


    void HandleLvmVgOverviewTab(any user_data, symbol widget)
    {
	string device = (string) user_data;

	switch (widget)
	{
	    case `resize:
		EpResizeVolumeGroup(device);
		break;

	    case `delete:
		EpDeleteVolumeGroup(device);
		break;
	}
    }


    void CreateLvmVgLvsTab(any user_data)
    {
	string device = (string) user_data;

	symbol Predicate(map disk, map partition)
	{
	    return StorageFields::PredicateDiskDevice(disk, partition, [ device ]);
	}

	list<symbol> fields = StorageSettings::FilterTable([ `device, `size, `format, `type,
							     `mount_point, `mount_by, `used_by,
							     `stripes ]);

	map<string, map> target_map = Storage::GetTargetMap();

	term table_header = StorageFields::TableHeader(fields);
	list<term> table_contents = StorageFields::TableContents(fields, target_map, Predicate);

	UI::ReplaceWidget(`tab_panel,
			  `VBox(
			      `Table(`id(`table), `opt(`keepSorting, `notify),
				     table_header, table_contents),
			      `HBox(
				  `PushButton(`id(`add), _("Add...")),
				  `PushButton(`id(`edit), _("Edit...")),
				  `PushButton(`id(`resize), _("Resize...")),
				  `PushButton(`id(`delete), _("Delete...")),
				  `HStretch()
				  )
			      )
	    );

	// helptext
	string helptext = _("<p>This view shows all logical volumes of the
selected volume group.</p>");

	Wizard::RestoreHelp(helptext + StorageFields::TableHelptext(fields));
    }


    void HandleLvmVgLvsTab(any user_data, symbol widget)
    {
	string vg_device = (string) user_data;
	string lv_device = (string) UI::QueryWidget(`id(`table), `CurrentItem);

	switch (widget)
	{
	    case `add:
		EpCreateLogicalVolume(vg_device);
		break;

	    case `edit:
		EpEditLogicalVolume(lv_device);
		break;

	    case `resize:
		EpResizeLogicalVolume(lv_device);
		break;

	    case `delete:
		EpDeleteLogicalVolume(lv_device);
		break;
	}
    }


    void CreateLvmVgPvsTab(any user_data)
    {
	string disk_device = (string) user_data;

	symbol Predicate(map disk, map partition)
	{
	    return StorageFields::PredicateUsedByDevice(disk, partition, [ disk_device ]);
	}

	list<symbol> fields = StorageSettings::FilterTable([ `device, `udev_path, `udev_id, `size,
							     `format, `type, `used_by ]);

	map<string, map> target_map = Storage::GetTargetMap();

	term table_header = StorageFields::TableHeader(fields);
	list<term> table_contents = StorageFields::TableContents(fields, target_map, Predicate);

	UI::ReplaceWidget(`tab_panel,
			  `VBox(
			      `Table(`id(`table), `opt(`keepSorting, `notify),
				     table_header, table_contents)
			      )
	    );

	// helptext
	string helptext = _("<p>This view shows all physical volumes used by
the selected volume group.</p>");

	Wizard::RestoreHelp(helptext + StorageFields::TableHelptext(fields));
    }


    void CreateLvmVgPanel(any user_data)
    {
	string device = (string) user_data;

	map<symbol, map> data = $[ `overview : $[ `create : CreateLvmVgOverviewTab, `handle : HandleLvmVgOverviewTab, `user_data : user_data ],
				   `lvs : $[ `create : CreateLvmVgLvsTab, `handle : HandleLvmVgLvsTab, `user_data : user_data ],
				   `pvs : $[ `create : CreateLvmVgPvsTab, `user_data : user_data ] ];

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `IconAndHeading(sformat(_("Volume Group: %1"), device), lvm_icon),
				  `DumbTab(`id(`tab), [
					       `item(`id(`overview), _("&Overview")),
					       `item(`id(`lvs), _("&Logical Volumes")),
					       `item(`id(`pvs), _("&Physical Volumes"))
					       ],
					   `ReplacePoint(`id(`tab_panel), TabPanel::empty_panel)
				      )
				  ))
	    );

	TabPanel::Init(data);
    }


    void HandleLvmVgPanel(any user_data, symbol widget)
    {
	TabPanel::Handle(widget);
    }


    void CreateLvmLvPanel(any user_data)
    {
	string device = (string) user_data;
	map<string, map> target_map = Storage::GetTargetMap();

	list<symbol> fields = StorageSettings::FilterOverview([ `heading_device, `device, `size, `used_by,
								`heading_lvm, `stripes, `heading_filesystem,
								`fs_type, `mount_point, `mount_by, `uuid,
								`label, `encrypted ]);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `HStretch(),
				  `IconAndHeading(sformat(_("Logical Volume: %1"), device), lvm_lv_icon),
				  StorageFields::Overview(fields, target_map, device),
				  `HBox(
				      `PushButton(`id(`edit), _("Edit...")),
				      `PushButton(`id(`resize), _("Resize...")),
				      `PushButton(`id(`delete), _("Delete...")),
				      `HStretch()
				      )
				  )
			      )
	    );

	// helptext
	string helptext = _("<p>This view shows detailed information about the
selected logical volume.</p>");

	Wizard::RestoreHelp(helptext + StorageFields::OverviewHelptext(fields));
    }


    void HandleLvmLvPanel(any user_data, symbol widget)
    {
	string device = (string) user_data;

	switch (widget)
	{
	    case `edit:
		EpEditLogicalVolume(device);
		break;

	    case `resize:
		EpResizeLogicalVolume(device);
		break;

	    case `delete:
		EpDeleteLogicalVolume(device);
		break;
	}
    }
}
