/**
 * File:
 *   lvm_lib.ycp
 *
 * Module:
 *   LVM
 *
 * Summary:
 *  main lib for defines, which are not lv or pv specific
 *
 * Authors:
 *   mike <mike@suse.de>
 *
 * $Id$
 *
 */

{
textdomain "storage";

define string lvmVg( string vg )
    {
    integer pos = search( vg, "/" );
    if( pos!=nil )
	return( substring( vg, pos+1 ));
    else
	return( vg );
    }

//////////////////////////////////////////////////////////////////////
// get a list of all volume groups in the targetMap
    
list<string> get_vgs( map<string,map> targetMap )
{
    list<string> lvm_vg = [];
	
    foreach( string dev, map devmap, targetMap, {
	if ( devmap["type"]:`CT_UNKNOWN==`CT_LVM )
	    {
	    // add a found volume group
	    lvm_vg = add( lvm_vg, substring(dev, 5) ); 
	    }
	});
    return( lvm_vg );
};


//////////////////////////////////////////////////////////////////////
// Let the User create a new Volume group: open dialog ...
// return: the changed targetMap and lvm_vgs  and cancelled 
// used by autoyast
define map addVolumeGroup( map vg, map<string,map> targetMap, list lvm_vgs )
    ``{
    boolean cancelled   = true;
    string  current_vg  = "";
    integer pesize      = 0;
      

    // has the user cancelled the dialog? 
    if( size(vg)>0 )
	{
	// Now the user has created a new vg: make it the current vg
	current_vg = vg["vgname"]:"error";
	pesize     = vg["pesize"]:0;
      
	cancelled = !Storage::CreateLvmVg( current_vg, pesize, 
	                                   vg["lvm2"]:true );
	}
    else
	{
	cancelled = true;
	}

    return( $[ "cancelled" : cancelled, "vg" : current_vg ]);
    };

//////////////////////////////////////////////////////////////////////
// Remove the specified volume group  
// return: boolean if removal was succesful

define boolean removeVolumeGroup( string current_vg )
    ``{
    return( Storage::DeleteLvmVg( current_vg ));
    };

}		 
