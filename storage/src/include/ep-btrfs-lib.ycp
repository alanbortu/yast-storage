/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:	ep-btrfs-lib.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Thomas Fehr <fehr@suse.de>
 *
 * This file must only be included in other Expert Partitioner files ("ep-*.ycp").
 */
{
    textdomain "storage";


void EpEditBtrfsDevice(string device)
    {
    if (device == nil)
	{
	// error popup
	Popup::Error(_("No Btrfs device selected."));
	return;
	}

    map<string, map> target_map = Storage::GetTargetMap();
    map<string, any> data = Storage::GetPartition(target_map, device);
    y2milestone( "EpEditBtrfsDevice device:%1 data:%2", device, data );

    if (Storage::IsUsedBy(data))
	{
	// error popup
	Popup::Error(sformat(_("The Btrfs %1 is in use. It cannot be
edited. To edit %1, make sure it is not used."), data["uuid"]:""));
	return;
	}

    if (DlgEditBtrfsVolume(data))
	{
	Storage::ChangeVolumeProperties(data);

	UpdateMainStatus();
	UpdateNavigationTree(nil);
	TreePanel::Create();
	UpdateTableFocus(device);
	}
    }

void EpDeleteBtrfsDevice(string device)
    {
    if (device == nil)
	{
	// error popup
	Popup::Error(_("No Btrfs device selected."));
	return;
	}

    map<string, map> target_map = Storage::GetTargetMap();
    map<string, any> data = Storage::GetPartition(target_map, device);
    y2milestone( "EpDeletBtrfsDevice device:%1 data:%2", device, data );

    if (!Storage::CanDelete(data, target_map["/dev/btrfs"]:$[], true))
	return;

    if (EpDeleteDevice(device))
	{
	any new_focus = nil;
	if (UI::QueryWidget(`tree, `CurrentItem) == device)
	    new_focus = `md;
	UpdateMainStatus();
	UpdateNavigationTree(new_focus);
	TreePanel::Create();
	}
    }

boolean AddVols(string device, list<string> devs)
    {
    boolean ret = true;

    foreach(string dev, devs, {
	Storage::SetPartitionId(dev, Partitions::fsid_native);
	Storage::SetPartitionFormat(dev, false, `none);
	if (!Storage::ExtendBtrfsVolume(device, dev))
	    ret = false;
	});
    return ret;
    }


boolean RemoveVols(string device, list<string> devs)
    {
    boolean ret = true;

    foreach(string dev, devs, {
	Storage::UnchangePartitionId(dev);
	if (!Storage::ReduceBtrfsVolume(device, dev))
	    ret = false;
	});
    return ret;
    }

void EpResizeBtrfsDevice(string device)
    {
    if (device == nil)
	{
	// error popup
	Popup::Error(_("No Btrfs device selected."));
	return;
	}

    map<string, map> target_map = Storage::GetTargetMap();
    map<string, any> data = Storage::GetPartition(target_map, device);
    y2milestone( "EpResizeBtrfsDevice device:%1 data:%2", device, data );

    symbol Commit()
	{
	list<string> devices_old = MergeDevices(data);
	list<string> devices_new = data["devices_new"]:[];

	list<string> devices_added = AddedToList(devices_old, devices_new);
	list<string> devices_removed = RemovedFromList(devices_old, devices_new);

	if(size(devices_added)>0)
	    y2milestone("EpResizeBtrfsDevice device_added:%1", devices_added );
	if(size(devices_removed)>0)
	    y2milestone("EpResizeBtrfsDevice device_removed:%1", devices_removed );

	if( size(devices_added) > 0 || size(devices_removed) > 0)
	    {
	    AddVols(device, devices_added);

	    if (!RemoveVols(device, devices_removed))
		{
		// error popup
		Popup::Error(_("Failed to remove some physical devices."));

		// TODO: update data

		return `back;
		}
	    }

	return `finish;
	}

    if( DlgResizeBtrfsVolume(data, Commit))
	{
	UpdateMainStatus();
	UpdateNavigationTree(nil);
	TreePanel::Create();
	}
    }
}
