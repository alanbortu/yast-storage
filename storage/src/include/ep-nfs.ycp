/**
 * File:	ep-nfs.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Arvin Schnell <aschnell@suse.de>
 */
{
    textdomain "storage";


    void CreateNfsMainPanel(any user_data)
    {
	symbol Predicate(map disk, map partition)
	{
	    return StorageFields::PredicateDiskType(disk, partition, [`CT_NFS]);
	}

	//FIXME: check if nfs-client package is there
	//list<symbol> fields = StorageSettings::FilterTable([ `device, `size, `mount_point ]);

	map<string, map> target_map = Storage::GetTargetMap();
	list < map <string, any> > nfs_shares = target_map["/dev/nfs", "partitions"]:[];

	//term table_header = StorageFields::TableHeader(fields);
	//list<term> table_contents = StorageFields::TableContents(fields, target_map, Predicate);

	term content = (term) WFM::CallFunction("nfs-client4part", ["CreateUI"]);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `HStretch(),
				  `IconAndHeading(_("Network File System (NFS)"), nfs_icon),
				  /*`Table(`id(`table), `opt(`keepSorting, `notify),
					 table_header, table_contents),
				  `HBox(
				      `Left(`PushButton(`id(`add), _("Add NFS Path..."))),
				      `HStretch()
				      )
				  )*/
			          content
				  )
			      )
	    );

	string helptext = _("<p>NFS TODO</p>");

	WFM::CallFunction("nfs-client4part", [ "FromStorage", $[ "shares" : nfs_shares ] ] );
	//Wizard::RestoreHelp(helptext + StorageFields::TableHelptext(fields));
    }


    void HandleNfsMainPanel(any user_data, symbol widget)
    {
/*	switch (widget)
	{
	    case `add:
		break;
	}*/
	WFM::CallFunction("nfs-client4part", [ "HandleEvent", $[ "widget_id" : widget ] ]);
    }


    void CreateNfsPanel(any user_data)
    {
	string part_device = (string) user_data;

	map<string, map> target_map = Storage::GetTargetMap();

	list<symbol> fields = StorageSettings::FilterOverview([ `heading_device, `device, `size,
								`heading_filesystem, `fs_type, `mount_point ]);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `IconAndHeading(sformat(_("NFS Path: %1"), part_device), nfs_icon),
				  `HStretch(),
				  StorageFields::Overview(fields, target_map, part_device),
				  `HBox(
				      `PushButton(`id(`edit), "Edit..."),
				      `PushButton(`id(`delete), "Delete..."),
				      `HStretch()
				      )
				  )
			      )
	    );

	string helptext = _("<p>NFS TODO</p>");

	Wizard::RestoreHelp(helptext + StorageFields::OverviewHelptext(fields));
    }


    void HandleNfsPanel(any user_data, symbol widget)
    {
	string part_device = (string) user_data;

	switch (widget)
	{
	    case `edit:
		break;

	    case `delete:
		break;
	}
    }
}
