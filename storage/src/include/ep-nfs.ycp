/**
 * File:	ep-nfs.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Arvin Schnell <aschnell@suse.de>
 */
{
    textdomain "storage";

    import "Directory";
    import "PackageCallbacks";
    import "PackageSystem";
    import "Wizard";

    //boolean initialized = false;
    map <string, map> target_map = $[];
    map <string, integer> index = $[];
    list <map> nfs_list = [];

    void CreateNfsMainPanel(any user_data)
    {
	symbol Predicate(map disk, map partition)
	{
	    return StorageFields::PredicateDiskType(disk, partition, [`CT_NFS]);
	}

	term CreateContent() 
	{
	    boolean pkg_installed = false;
	    //fallback dialog content
	    term fallback_content = `VBox (
				`Left( `Label(_("NFS configuration is not available. Check yast2-nfs-client package installation.")) ),
				`VStretch(),
				`HStretch()
			    );

	    //Check if we have y2-nfs-client installed
	    if ( !Stage::initial() )
	    {
		list <string> pkgs = [ "yast2-nfs-client" ];
	        PackageCallbacks::RegisterEmptyProgressCallbacks();
	        pkg_installed = PackageSystem::CheckAndInstallPackages(pkgs);
	        PackageCallbacks::RestorePreviousProgressCallbacks();
	    }
	    //in inst-sys, have a look at nfs-client4part adapter client
	    else
	    {
		string filename = "nfs-client4part";
		pkg_installed = WFM::ClientExists(filename);
	    }

	    if ( pkg_installed )
	    {
	        term content = (term) WFM::CallFunction("nfs-client4part", ["CreateUI"]);
		if ( content != nil )
		    return content;
		else
		    y2error("Failed to retrieve dialog content from yast2-nfs-client");
	    }

	    //Obviously something went wrong - reset the help text and put a fallback content in
	    Wizard::SetHelpText(" ");
	    return fallback_content;
	}

        void Initialize() 
	{
	    target_map = Storage::GetTargetMap();

	    //No NFS shares so far, set empty 'partitions' list
	    if( !haskey( target_map, "/dev/nfs" ) )
	        target_map["/dev/nfs"] = $[ "type" : `CT_NFS, "partitions" : [] ];

	    nfs_list = target_map["/dev/nfs", "partitions"]:[];
	    y2internal("before %1", nfs_list);

	    //Create index
	    integer i = 0;
	    foreach( map entry, nfs_list, {
		index = add(index, entry["device"]:"", i);
		i = i+1;
	    });
	}



	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `HStretch(),
				  // heading
				  `IconAndHeading(_("Network File System (NFS)"), nfs_icon),
			          CreateContent()
				  )
			      )
	    );

	Initialize();

	WFM::CallFunction("nfs-client4part", [ "FromStorage", $[ "shares" : nfs_list] ] );
    }


    void HandleNfsMainPanel(any user_data, symbol widget)
    {

	void AddShare ( map <string, any> entry ) 
	{
	    map newent = $[];
	    newent["type"] = `nfs;
	    newent["used_fs"] = `nfs;
	    newent["detected_fs"] = `nfs;
	    newent["device"] = entry["device"]:"";
	    newent["fstopt"] = entry["fstopt"]:"";
	    newent["mount"] = entry["mount"]:"";
	    newent["create"] = true;

	    nfs_list = add( nfs_list, newent);
        }

	void EditShare( map <string, any> entry )
	{
	    string dev = entry["device"]:"";
	    map newent = $[];
	    y2internal("%1 %2 %3", dev, index, nfs_list);

	    if ( haskey( index, dev)) 
	    {
	        newent = nfs_list[ index[dev]: -1 ]: $[];
		newent["fstopt"] = entry["fstopt"]:"";
	        newent["mount"] = entry["mount"]:"";
		nfs_list [ index[dev]: -1 ] = newent;
	    }

	}
	void DeleteShare( map <string, any> entry )
	{
	    string dev = entry["device"]:"";

	    if ( haskey( index, dev)) 
	    {
		Storage::DeleteDevice("/dev/nfs", dev );
	    }
	}

	map <string, any> line = ( map <string, any> ) WFM::CallFunction("nfs-client4part", [ "HandleEvent", $[ "widget_id" : widget ] ]);

	switch (widget )
	{
	    case `newbut:
	    {
		AddShare( line );
		break;
	    }
	    case `editbut:
	    {
		EditShare( line );
		break;
	    }
	    case `delbut:
	    {
		DeleteShare( line );
		break;
	    }
	    default:
		break;
	}

	target_map["/dev/nfs", "partitions"] = nfs_list;
	y2internal("after %1", target_map["/dev/nfs", "partitions"]:[]);
	Storage::SetTargetMap( target_map );
    }

    void CreateNfsPanel(any user_data)
    {
	//a hack - we don't have overviews for nfs dirs, so let's switch to the main panel ...
	CreateNfsMainPanel( user_data );
	UI::ChangeWidget(`tree, `CurrentItem, `nfs );

    }


 }
