/**
 * File:	ep-nfs.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Arvin Schnell <aschnell@suse.de>
 */
{
    textdomain "storage";

    //boolean initialized = false;
    map <string, map> target_map = $[];
    map <string, integer> index = $[];
    list <map> nfs_list = [];

    void CreateNfsMainPanel(any user_data)
    {
	symbol Predicate(map disk, map partition)
	{
	    return StorageFields::PredicateDiskType(disk, partition, [`CT_NFS]);
	}

	//FIXME: check if nfs-client package is there
	//list<symbol> fields = StorageSettings::FilterTable([ `device, `size, `mount_point ]);

        void Initialize() 
	{
	    target_map = Storage::GetTargetMap();

	    //No NFS shares so far, set empty 'partitions' list
	    if( !haskey( target_map, "/dev/nfs" ) )
	        target_map["/dev/nfs"] = $[ "type" : `CT_NFS, "partitions" : [] ];

	    nfs_list = target_map["/dev/nfs", "partitions"]:[];
	    y2internal("before %1", nfs_list);

	    //Create index
	    integer i = 0;
	    foreach( map entry, nfs_list, {
		index = add(index, entry["device"]:"", i);
		i = i+1;
	    });
	}

	//list < map <string, any> > nfs_shares = target_map["/dev/nfs", "partitions"]:[];

	//term table_header = StorageFields::TableHeader(fields);
	//list<term> table_contents = StorageFields::TableContents(fields, target_map, Predicate);

	term content = (term) WFM::CallFunction("nfs-client4part", ["CreateUI"]);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  `HStretch(),
				  // heading
				  `IconAndHeading(_("Network File System (NFS)"), nfs_icon),
				  /*`Table(`id(`table), `opt(`keepSorting, `notify),
					 table_header, table_contents),
				  `HBox(
				      `Left(`PushButton(`id(`add), _("Add NFS Path..."))),
				      `HStretch()
				      )
				  )*/
			          content
				  )
			      )
	    );

	// helptext
	string helptext = _("<p>NFS TODO</p>");
	Initialize();

	WFM::CallFunction("nfs-client4part", [ "FromStorage", $[ "shares" : nfs_list] ] );
	//Wizard::RestoreHelp(helptext + StorageFields::TableHelptext(fields));
    }


    void HandleNfsMainPanel(any user_data, symbol widget)
    {

	
	void AddShare ( map <string, any> entry ) 
	{
	    map newent = $[];
	    newent["type"] = `nfs;
	    newent["used_fs"] = `nfs;
	    newent["detected_fs"] = `nfs;
	    newent["device"] = entry["spec"]:"";
	    newent["fstopt"] = entry["mntops"]:"";
	    newent["mount"] = entry["file"]:"";
	    newent["create"] = true;

	    nfs_list = add( nfs_list, newent);
        }

	void EditShare( map <string, any> entry )
	{
	    string dev = entry["spec"]:"";
	    map newent = $[];
	    y2internal("%1 %2 %3", dev, index, nfs_list);

	    if ( haskey( index, dev)) 
	    {
	        newent = nfs_list[ index[dev]: -1 ]: $[];
		newent["fstopt"] = entry["mntops"]:"";
	        newent["mount"] = entry["file"]:"";
		nfs_list [ index[dev]: -1 ] = newent;
	    }

	}
	void DeleteShare( map <string, any> entry )
	{
	    string dev = entry["spec"]:"";

	    if ( haskey( index, dev)) 
	    {
		Storage::DeleteDevice("/dev/nfs", dev );
	    }
	}

	map <string, any> line = ( map <string, any> ) WFM::CallFunction("nfs-client4part", [ "HandleEvent", $[ "widget_id" : widget ] ]);

	switch (widget )
	{
	    case `newbut:
	    {
		AddShare( line );
		break;
	    }
	    case `editbut:
	    {
		EditShare( line );
		break;
	    }
	    case `delbut:
	    {
		DeleteShare( line );
		break;
	    }
	    default:
		break;
	}

	target_map["/dev/nfs", "partitions"] = nfs_list;
	y2internal("after %1", target_map["/dev/nfs", "partitions"]:[]);
	Storage::SetTargetMap( target_map );
    }

    void CreateNfsPanel(any user_data)
    {
	string part_device = (string) user_data;

	map<string, map> target_map = Storage::GetTargetMap();

	list<symbol> fields = StorageSettings::FilterOverview([ `heading_device, `device, `size,
								`heading_filesystem, `fs_type, `mount_point ]);

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  // heading
				  `IconAndHeading(sformat(_("NFS Path: %1"), part_device), nfs_icon),
				  `HStretch(),
				  StorageFields::Overview(fields, target_map, part_device),
				  `HBox(
				      // push button text
				      `PushButton(`id(`edit), "Edit..."),
				      // push button text
				      `PushButton(`id(`delete), "Delete..."),
				      `HStretch()
				      )
				  )
			      )
	    );

	// helptext
	string helptext = _("<p>NFS TODO</p>");

	Wizard::RestoreHelp(helptext + StorageFields::OverviewHelptext(fields));
    }


    void HandleNfsPanel(any user_data, symbol widget)
    {
	string part_device = (string) user_data;

	switch (widget)
	{
	    case `edit:
		break;

	    case `delete:
		break;
	}
    }
}
