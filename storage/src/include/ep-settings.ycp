/**
 * File:	ep-settings.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Arvin Schnell <aschnell@suse.de>
 */
{
    textdomain "storage";


    list< map<symbol, any> > visible_fields = [
	// list entry
	$[ `label : _("Label"), `fields : [ `label ] ],
	// list entry
	$[ `label : _("UUID"), `fields : [ `uuid ] ],
	// list entry
	$[ `label : _("Mount by"), `fields : [ `mount_by ] ],
	// list entry
	$[ `label : _("Used by"), `fields : [ `used_by ] ],
	// list entry
	$[ `label : _("BIOS ID"), `fields : [ `bios_id ] ],
	// list entry
	$[ `label : _("Cylinder information"), `fields : toset([ `start_cyl, `end_cyl, `num_cyl, `cyl_size ]) ],
	// list entry
	$[ `label : _("Fibre Channel information"), `fields : toset([ `fc_wwpn, `fc_fcp_lun, `fc_port_id ]) ]
    ];


    void CreateSettingsPanel(any user_data)
    {
	list <term> PreselectVisibleFields()
	{
	    list <symbol> hidden_fields = StorageSettings::GetHiddenFields();
	    return maplist(integer i, Integer::Range(size(visible_fields)), {
		string label = visible_fields[i, `label]:"";
		list<symbol> fields = visible_fields[i, `fields]:[];
		boolean selected = list::reduce(boolean tmp, symbol field, true, fields, {
		    return tmp && !setcontains(hidden_fields, field);
		});
		return `item(`id(i), label, selected);
	    });
	}

	UI::ReplaceWidget(`tree_panel,
			  Greasemonkey::Transform(
			      `VBox(
				  // dialog heading
				  `IconAndHeading(_("Settings"), settings_icon),
				  `VBox(
				      `Left(`ComboBoxSelected(`id(`default_mountby),
							      // combo box label
							      _("Default Mount by"),
							      [
								  // combo box entry
								  `item(`id(`device), _("Device Name")),
								  // combo box entry
								  `item(`id(`label), _("Volume Label")),
								  // combo box entry
								  `item(`id(`uuid), _("UUID")),
								  // combo box entry
								  `item(`id(`id), _("Device ID")),
								  // combo box entry
								  `item(`id(`path), _("Device Path"))
							      ],
							      `id(Storage::GetDefaultMountBy()))),
				      `Left(`ComboBoxSelected(`id(`default_fs),
							      // combo box label
							      _("Default File System"),
							      [
								  // combo box entry
								  `item(`id(`ext2), "Ext2"),
								  // combo box entry
								  `item(`id(`ext3), "Ext3"),
								  // combo box entry
								  `item(`id(`reiser), "Reiser"),
								  // combo box entry
								  `item(`id(`xfs), "XFS")
							      ],
							      `id(Partitions::DefaultFs()))),
				      `VSpacing(1),
				      `Left(`ComboBoxSelected(`id(`display_name), `opt(`notify),
							      // combo box label
							      _("Show Storage Devices by"),
							      [
								  // combo box entry
								  `item(`id(`device), _("Device Name")),
								  // combo box entry
								  `item(`id(`id), _("Device ID")),
								  // combo box entry
								  `item(`id(`path), _("Device Path"))
							      ],
							      `id(StorageSettings::GetDisplayName()))),
				      //This looks extremely ugly, but obviously there are few other means how
				      //to make MultiSelection widget smaller, yet still readable
				      `Left(`HBox(
						`MultiSelectionBox(`id(`visible_fields), `opt(`shrinkable),
								   // multi selection box label
							           _("Visible Information On Storage Devices"),
								   PreselectVisibleFields()),
				                `HStretch()
						))
				      ),
				  `VStretch()
				  )));


	// helptext
	string helptext = _("<p>This view shows general storage
settings:</p>");

	// helptext
	helptext = helptext + _("<p><b>Default Mount by</b> gives the mount by
method for newly created file systems.</p>");

	// helptext
	helptext = helptext + _("<p><b>Default File System</b> gives the file
system type for newly created file file systems.</p>");

	// helptext
	helptext = helptext + _("<p><b>Show Storage Devices by</b> controls
the name displayed for hard disks in the navigation tree.</p>");

	// helptext
	helptext = helptext + _("<p><b>Visible Information On Storage
Devices</b> allows to hide information in the tables and overview.</p>");

	Wizard::RestoreHelp(helptext);
    }


    void HandleSettingsPanel(any user_data, symbol widget)
    {
	if (widget == `display_name)
	{
	    StorageSettings::SetDisplayName((symbol) UI::QueryWidget(`id(`display_name), `Value));
	    UpdateNavigationTree(nil);
	}
    }


    void DestroySettingsPanel(any user_data)
    {
	list<symbol> InvertVisibleFields(list<symbol> hidden_fields)
	{
	    list<integer> selected = (list<integer>) UI::QueryWidget(`id(`visible_fields), `SelectedItems);

	    foreach(integer i, Integer::Range(size(visible_fields)), {
		list<symbol> fields = visible_fields[i, `fields]:[];
		if (contains(selected, i))
		    hidden_fields = filter(symbol hidden_field, hidden_fields, { return !setcontains(fields, hidden_field); });
		else
		    hidden_fields = toset(flatten([ hidden_fields, fields ]));
	    });

	    return hidden_fields;
	}

	Storage::SetDefaultMountBy((symbol) UI::QueryWidget(`id(`default_mountby), `Value));
	Partitions::SetDefaultFs((symbol) UI::QueryWidget(`id(`default_fs), `Value));
	StorageSettings::SetHiddenFields(InvertVisibleFields(StorageSettings::GetHiddenFields()));
    }
}
