/**
 * File:	DualMultiSelectionBox.ycp
 * Package:	yast2-storage
 * Summary:	Expert Partitioner
 * Authors:	Arvin Schnell <aschnell@suse.de>
 *
 * The items must have the `id() as their first element.
 */
{
    module "DualMultiSelectionBox";

    import "Label";
    import "Event";
    import "Popup";
    import "Storage";

    textdomain "storage";


    list<term> items = [];

    list<any> selected = [];
    map<any,term> item_map = $[];
    map<string,string> classified = $[];
    boolean keep_order = false;


    list<term> GetUnselectedItems()
    {
	return filter(term item, items, {
	    any id = item[0, 0]:nil;
	    return !contains(selected, id);
	});
    }


    list<term> GetSelectedItems()
    {
        y2milestone( "selected:%1", selected );
        if( keep_order )
            return( maplist( any id, selected, {return item_map[id]:`Empty();}));
        else
            return filter(term item, items, {
                any id = item[0, 0]:nil;
                return contains(selected, id);
                });

    }


    global term Create(term header, list<term> new_items, list<any> new_selected, string unselected_label,
		       string selected_label, term unselected_rp, term selected_rp, boolean can_change_order )
    {
	items = new_items;
	selected = new_selected;
        item_map = listmap( term item, new_items, {return $[ item[0, 0]:"" : item ];} );
        keep_order = can_change_order;
        term sel_header = header;
        if( can_change_order )
            {
            sel_header = add( sel_header, `Center(_("Class")) );
            }
        term sel_term = `Table(`id(`selected), `opt(`keepSorting, `multiSelection, `notify), 
                               sel_header, GetSelectedItems());
        if( can_change_order )
            {
            term order_buttons = `VBox(
                `PushButton( `id(`top), _("Top") ),
                `VSpacing(0.5),
                `PushButton( `id(`up), _("Up") ),
                `VSpacing(0.5),
                `PushButton( `id(`down), _("Down") ),
                `VSpacing(0.5),
                `PushButton( `id(`bottom), _("Bottom") ),
                `VSpacing(1.5),
                `PushButton( `id(`classify), _("Classify") ));
            sel_term = `HBox( sel_term, order_buttons );
            }
	return `HBox(
	    `HWeight(1, `VBox(
			 `Left(`Label(unselected_label)),
			 `Table(`id(`unselected), `opt(`keepSorting, `multiSelection, `notify), header, 
                                GetUnselectedItems()),
			 `ReplacePoint(`id(`unselected_rp), unselected_rp)
			 )),
	    `MarginBox(1, 1,
		       `HSquash(`VBox(
				    // push button text
				    `PushButton(`id(`add), `opt(`hstretch), _("Add") + " " + UI::Glyph(`ArrowRight)),
				    // push button text
				    `PushButton(`id(`add_all), `opt(`hstretch), _("Add All") + " " + UI::Glyph(`ArrowRight)),
				    `VSpacing(1),
				    // push button text
				    `PushButton(`id(`remove), `opt(`hstretch), UI::Glyph(`ArrowLeft) + " " + _("Remove")),
				    // push button text
				    `PushButton(`id(`remove_all), `opt(`hstretch), UI::Glyph(`ArrowLeft) + " " + _("Remove All"))
				    ))),
	    `HWeight(1, `VBox(
			 `Left(`Label(selected_label)),
                         sel_term,
			 `ReplacePoint(`id(`selected_rp), selected_rp)
			 ))
	    );
    }


    global list<any> GetSelected()
    {
	return selected;
    }

list<list> ScanPatternFile( string fname )
    {
    list<list> ret = [];
    string txt = "";
    y2milestone( "ScanPatternFile fname:%1", fname );
    map d = (map)SCR::Read( .target.stat, fname );
    y2milestone( "ScanPatternFile stat:%1", d );
    boolean ok = true;
    if( !d["isreg"]:false )
        {
        // error popup text
        txt = sformat( _("File %1 is not a regular file!"), fname );
        Popup::Error( txt );
        ok = false;
        }
    else if( d["size"]:0 > 1024*1024 )
        {
        // error popup text
        txt = sformat( _("File %1 is too big!"), fname );
        Popup::Error( txt );
        ok = false;
        }
    list<string> sl = [];
    list<string> fl = [];
    if( ok )
        {
        map bo = (map)SCR::Execute(.target.bash_output, "cat "+fname );
        sl = filter( string s, splitstring( bo["stdout"]:"", "\n" ), ``(!isempty(s)));
        fl = filter( string s, splitstring(sl[0]:"", " \t"), ``(!isempty(s)) );
        y2milestone( "ScanPatternFile fline:%1 size:%2", fl, size(fl) );
        if( isempty(sl) || size(fl)!=2 || size(fl[1]:"")!=1 )
            {
            // error popup text
            txt = _("Pattern file has invalid format!\n
The file needs to contain lines with a regular expression and a class name
per line. Example:");
            txt = txt + "\nsda.* A\nsdb.* B";
            Popup::Error( txt );
            ok = false;
            }
        }
    if( ok )
        {
        foreach( string s, sl,
            {
            fl = filter( string f, splitstring(s, " \t"), ``(!isempty(f)) );
            if( !isempty(fl[0]:"") && size(fl[1]:"")==1 )
                ret = add( ret, [ fl[0]:"", toupper(fl[1]:"") ] );
            });
        // popup text
        txt = _("Detected following pattern lines:") + "\n";
        foreach( list l, ret,
            {
            txt = txt + "\n" + l[0]:"" + " : " + l[1]:"";
            });
        txt = txt + "\n\n";
        txt = txt + _("Ok to match devices to classes with these patterns?");
        ok = Popup::YesNo( txt );
        if( !ok )
            ret = [];
        }
    y2milestone( "ScanPatternFile ret:%1", ret );
    return( ret );
    }

void FindDeviceMatches( map<string,string>& dc, list<list> plst )
    {
    map<string, map> tg = Storage::GetTargetMap();
    dc = mapmap( string d, string c, dc,
        {
        map p = Storage::GetPartition( tg, d );
        y2milestone( "FindDeviceMatches %1 is %2", d, p );
        list match = find( list m, plst, 
            {
            boolean found = regexpmatch( d, m[0]:"" );
            if( !found )
                found = regexpmatch( p["device"]:"", m[0]:"" );
            if( !found )
                {
                string id = find( string s, p["udev_id"]:[], 
                                  ``(regexpmatch( "/dev/disk/by-id/"+s, m[0]:"" )));
                found = id!=nil;
                }
            if( !found )
                found = regexpmatch( "/dev/disk/by-path/"+p["udev_path"]:"", m[0]:"" );
            return( found );
            });
        y2milestone( "FindDeviceMatches match %1 is %2", d, match );
        if( match!=nil )
            c = match[1]:"";
        return( $[ d : c ] );
        });
    }

list ClassifyPopup( list selected )
    {
    // button text
    string txt_sort = ("Sorted");
    // button text
    string txt_inter = ("Interleaved");
    // button text
    string txt_pat = ("Pattern File");
    string SymToLetter( symbol sym )
        {
        string lbl = tostring(sym);
        return( substring(lbl,size(lbl)-1));
        }
    string SymToLabel( symbol sym, boolean hint )
        {
        // button text
        return( _("Class") + (hint?" &":"") + SymToLetter(sym) );
        }
    string ClassifyHelpText()
        {
        // dialog help text
        string txt = _("<p>This dialog is for defining classes for the raid devices
contained in the raid. Available classes are A, B, C, D and E but for many cases
fewer classes are needed (e.g. only A and B). </p>");
        // dialog help text
        txt = txt + sformat(_("<p>You can put a device into a class by right-clicking on the
device and choosing the appropriate class from context menu. By pressing the 
Ctrl  or Shift key you can select multiple devices and put them into a class in
one step. One can also use the buttons labeled \"%1\" to \"%2\" to put currently 
selected devices into this class.</p>"), 
        SymToLabel( `class_A, false ), SymToLabel( `class_E, false ));
        // dialog help text
        txt = txt + sformat(_("<p>After choosing classes for devices you can order the 
devices by pressing one of the buttons labeled \"%1\" or \"%2\"."),
        txt_sort, txt_inter );
        txt = txt + " ";
        // dialog help text
        txt = txt + _("<b>Sorted</b> puts all devices of class A before all devices
of class B and so on.");
        txt = txt + " ";
        // dialog help text
        txt = txt + _("<b>Interleaved</b> uses first device of class A, then first device of 
class B, then all teh following classes with assigned devices. Then the 
second device of class A, the second device of class B, and so on will follow.");
        txt = txt + " ";
        // dialog help text
        txt = txt + _("All devices without a class are sorted to the end of devices list.
When you leave the pop-up the current order of the devices is used as the 
order in the RAID to be created.</p>");
        // dialog help text
        txt = txt + sformat(_("By pressing button \"<b>%1</b>\" you can select a file that contains
lines with a regular expression and a class name (e.g. \"sda.*  A\"). All devices that match 
the regular expression will be put into the class on this line. The regular expression is 
matched against the kernel name (e.g. /dev/sda1), 
the udev path name (e.g. /dev/disk/by-path/pci-0000\:00\:1f.2-scsi-0:0:0:0-part1) and the
the udev id (e.g. /dev/disk/by-id/ata-ST3500418AS_9VMN8X8L-part1). 
The first match finally determines the class if a devices name matches more then one
regular expression.</p>"), txt_pat );
        return( txt );
        }

    if( isempty(classified) )
        {
        classified = listmap( string s, (list<string>)selected, {return( $[ s : "" ] );} );
        }
    y2milestone( "ClassifyPopup select:%1", selected );
    y2milestone( "ClassifyPopup classified:%1", classified );
    list<term> itl = maplist( string s, (list<string>)selected, ``(`item( `id(s), s, classified[s]:"")));
    y2milestone( "ClassifyPopup items:%1", itl );
    list<symbol> classes = [ `class_A, `class_B, `class_C, `class_D, `class_E ];
    term cb = `HBox();
    foreach( symbol s, classes, 
        {
        string lbl = tostring(s);
        lbl = substring(lbl,size(lbl)-1);
        cb = add( cb, `PushButton( `id(s), SymToLabel(s,true)));
        });
    UI::OpenDialog( `opt(`decorated),
                    `VBox( `MinHeight(15,
                               `Table( `id(`classtab), `opt(`keepSorting,`immediate,`notify,`multiSelection,`notifyContextMenu),
                                       // headline text
                                       `header(_("Device"), `Center(_("Class"))), itl )),
                           cb,
                           `HBox( 
                               `PushButton(`id(`help), `opt(`helpButton), Label::HelpButton() ),
                               `PushButton(`id(`sorted), txt_sort + " (AAABBBCCC)"),
                               `PushButton(`id(`interleaved), txt_inter + " (ABCABCABC)"),
                               `PushButton(`id(`pattern), txt_pat)),
                           `VSpacing(0.5),
                           `ButtonBox(
                               `PushButton (`id(`cancel), `opt(`cancelButton), Label::CancelButton()),
                               `PushButton (`id(`ok), `opt(`okButton), Label::OKButton()))));
    UI::ChangeWidget(`help, `HelpText, ClassifyHelpText() );
    symbol ret = nil;
    list<term> ctx = maplist( symbol s, classes, ``(`item( `id(s), SymToLabel(s,false))));
    do
        {
        map ev = UI::WaitForEvent();
        ret = Event::IsWidgetActivatedOrSelectionChanged(ev);
        if( ret==nil )
            ret = Event::IsWidgetValueChanged(ev);
        if( ret==nil )
            ret = Event::IsWidgetContextMenuActivated(ev);
        y2milestone( "ClassifyPopup event:%1 ret:%2", ev, ret );
        if(ret==`classtab)
            {
            if( Event::IsWidgetContextMenuActivated(ev)!=nil )
                {
                UI::OpenContextMenu(`menu(ctx));
                any value = UI::UserInput();
                if( (symbol)value!=nil )
                    ret = (symbol)value;
                y2milestone( "ClassifyPopup value:%1", value );
                }
            }
        if( contains( classes, ret ))
            {
            list<string> ls = (list<string>)UI::QueryWidget(`id(`classtab), `SelectedItems);
            y2milestone( "ClassifyPopup ls:%1", ls );
            string let = SymToLetter(ret);
            y2milestone( "ClassifyPopup class:%1", let );
            itl = (list<term>)UI::QueryWidget(`id(`classtab), `Items);
            itl = maplist( term t, itl,
                {
                if( contains( ls, t[1]:"" ))
                    t[2] = let;
                return( t );
                });
            UI::ChangeWidget(`id(`classtab), `Items, itl);
            UI::ChangeWidget(`id(`classtab), `SelectedItems, ls);
            }
        else if( ret==`interleaved )
            {
            itl = (list<term>)UI::QueryWidget(`id(`classtab), `Items);
            list<term> ll = filter( term a, itl, ``(a[2]:""<"A"));
            itl = filter( term a, itl, ``(a[2]:"">="A"));
            list<term> sl = [];
            list<list<term> > tll = [];
            integer cidx = 0;
            while( cidx<size(classes) )
                {
                string let = SymToLetter( classes[cidx]:`none );
                sl = filter( term t, itl, ``(t[2]:""==let)); 
                if( !isempty(sl) )
                    tll = add( tll, sl );
                cidx=cidx+1;
                }
            sl = [];
            term mpty = `item( `id(0), "-" );
            while( !isempty(tll) )
                {
                cidx = 0;
                while( cidx<size(tll) )
                    {
                    sl = add( sl, tll[cidx,0]:mpty );
                    tll[cidx] = remove( tll[cidx]:[], 0 );
                    if( !isempty(tll[cidx]:[]) )
                        cidx=cidx+1;
                    else
                        tll = remove(tll,cidx);
                    }
                }
            itl = (list<term>)union( sl, ll );
            UI::ChangeWidget(`id(`classtab), `Items, itl);
            }
        else if( ret==`sorted )
            {
            itl = (list<term>)UI::QueryWidget(`id(`classtab), `Items);
            list<term> ll = filter( term a, itl, ``(a[2]:""<"A"));
            itl = sort( term a, term b, filter( term t, itl, ``(t[2]:"">="A")), 
                        ``(a[2]:" "<b[2]:" "));
            itl = (list<term>)union( itl, ll );
            UI::ChangeWidget(`id(`classtab), `Items, itl);
            }
        else if( ret==`pattern )
            {
                                                            // headline text
            string fname = UI::AskForExistingFile( ".", "", _("Pattern File") );
            y2milestone( "ClassifyPopup file:%1", fname );
            list<list> plst = [];
            if( fname!=nil )
                plst = ScanPatternFile( fname );
            if( !isempty(plst) )
                {
                itl = (list<term>)UI::QueryWidget(`id(`classtab), `Items);
                map<string,string> dc = $[];
                dc = listmap( term t, itl, {return( $[ t[1]:"" : "" ] );});
                y2milestone( "ClassifyPopup dc:%1", dc );
                FindDeviceMatches( dc, plst );
                y2milestone( "ClassifyPopup dc:%1", dc );
                itl = maplist( term t, itl,
                    {
                    t[2] = dc[t[1]:""]:"";
                    return( t );
                    });
                UI::ChangeWidget(`id(`classtab), `Items, itl);
                }
            }
        }
    while( !contains( [`ok,`cancel], ret ));
    if( ret==`cancel )
        selected=nil;
    else
        {
        itl = (list<term>)UI::QueryWidget(`id(`classtab), `Items);
        selected = maplist( term t, itl, ``(t[1]:""));
        foreach( term t, itl, {classified[t[1]:""] = t[2]:"";});
        y2milestone( "ClassifyPopup classified:%1", classified );
        }
    UI::CloseDialog();
    y2milestone( "ClassifyPopup return:%1", selected );
    return( selected );
    }


list<string> reverse( list<string> v )
    {
    integer siz = size(v);
    integer i=0;
    string save = "";
    while( i<siz/2 )
        {
        save = v[i]:"";
        v[i] = v[siz-1-i]:"";
        v[siz-1-i] = save;
        i = i+1;
        }
    return( v );
    }

    global void Handle(symbol widget)
    {
        list<string> sel = [];
	switch (widget)
	{
	    case `unselected:
	    case `add: {
		list<any> tmp1 = (list<any>) UI::QueryWidget(`id(`unselected), `SelectedItems);
		selected = flatten([ selected, tmp1 ]);
		sel = (list<string>) UI::QueryWidget(`id(`selected), `SelectedItems);
                y2milestone( "selected:%1", selected );
	    } break;

	    case `selected:
	    case `remove: {
		list<any> tmp1 = (list<any>) UI::QueryWidget(`id(`selected), `SelectedItems);
		selected = filter(any tmp2, selected, { return !contains(tmp1, tmp2); });
		sel = (list<string>) UI::QueryWidget(`id(`selected), `SelectedItems);
                sel = (list<string>)filter(any tmp2, sel, { return !contains(tmp1, tmp2); });
                y2milestone( "selected:%1", selected );
	    } break;

	    case `add_all: {
		list<any> tmp1 = maplist(term item, items, { any id = item[0, 0]:nil; return id; });
                tmp1 = filter( string s, (list<string>)tmp1, ``(!contains( selected, s )));
		selected = merge( selected, tmp1 );
		sel = (list<string>) UI::QueryWidget(`id(`selected), `SelectedItems);
                y2milestone( "selected:%1", selected );
	    } break;

	    case `remove_all: {
		selected = [];
		classified = $[];
                items = maplist( term t, items, { t[5] = ""; item_map[t[1]:""] = t; return t; });
                y2milestone( "selected:%1", selected );
	    } break;

	    case `classify: {
                y2milestone( "selected:%1", selected );
                list<any> l = ClassifyPopup( selected );
                if( l!=nil )
                    {
                    selected = l;
                    y2milestone( "selected:%1", selected );
                    items = maplist( term t, items, { t[5] = classified[t[1]:""]:""; item_map[t[1]:""] = t; return t; });
                    }

	    } break;

	    case `up:
	    case `down: {
                boolean up = (widget==`up);
		sel = (list<string>) UI::QueryWidget(`id(`selected), `SelectedItems);
                integer cnt = -1;
                integer siz = size(selected)-1;
                map<string,integer> sm = 
                    listmap( string s, 
                             (list<string>)selected, 
                             { cnt=cnt+1; return( $[ s : cnt ] ); } );
                cnt = 0;
                integer diff = up ? -1 : 1;
                if( !up )
                    sel = reverse(sel);
                foreach( string s, sel,
                    {
                    integer idx = sm[s]:0;
                    if( (up && idx>cnt) || (!up && idx<siz-cnt) )
                        {
                        any save = selected[idx+diff]:(any)"";
                        selected[idx+diff] = selected[idx]:(any)"";
                        selected[idx] = save;
                        }
                    cnt=cnt+1;
                    });
                y2milestone( "change:%1 selected:%2", sel, selected  );
	    } break;

	    case `top:
	    case `bottom: {
                boolean up = (widget==`top);
		sel = (list<string>) UI::QueryWidget(`id(`selected), `SelectedItems);
                selected = filter( string s, (list<string>)selected, ``(!contains( sel, s )));
                if( up )
                    selected = merge( sel, selected );
                else
                    selected = merge( selected, sel );
                y2milestone( "change:%1 selected:%2", sel, selected  );
	    } break;
	}

	if (contains([`unselected, `selected, `add, `add_all, `remove, `remove_all, `up, `down, `top, `bottom, `classify], widget))
	{
	    UI::ChangeWidget(`id(`unselected), `Items, GetUnselectedItems());
	    UI::ChangeWidget(`id(`selected), `Items, GetSelectedItems());
            UI::ChangeWidget(`id(`selected), `SelectedItems, sel);
	}
    }
}
